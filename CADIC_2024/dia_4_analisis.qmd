---
title: | 
  | Análisis de datos: modelos lineales habituales en ecología
subtitle: "Curso: Programación y análisis estadístico en R. CADIC, Ushuaia, Argentina"
author: 
  - name: Verónica Cruz-Alonso 
    role: "Profesora y autora del material"
  - name: Enrique Andivia
    role: "Autor del material"
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-depth: 4
toc-title: "Índice"
format:
  html:
    link-external-newwindow: true
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
bibliography: references.bib
---

## Objetivos del día 5

Los objetivos del día de hoy son:

-   Aprender los fundamentos de los modelos lineales en R.

-   Aprender qué son los modelos generalizados y mixtos y para qué se usan.

-   Aprender a reportar los resultados de los modelos.

## Introducción a los modelos de regresión

El objetivo de un análisis estadístico es estimar los parámetros del modelo que conducen al mejor ajuste del mismo a nuestros datos. El mejor modelo es aquel que explica la mayor variabilidad posible de la variable respuesta, siempre que los parámetros del modelo sean estadísticamente significativos. No existe un único modelo sino una gran cantidad de modelos que se ajustan a nuestros datos en mayor o menor medida. De entre dos modelos que expliquen la misma variabilidad debemos quedarnos con el más simple de todos (el más parsimonioso).

> All models are wrong, but some are useful
>
> --- George E. P. Box

El **análisis de regresión** se usa para explicar o predecir la relación lineal entre una variable Y (variable respuesta o dependiente), y una o más variables explicativas o independientes. Cuando hay una variable explicativa hablamos de regresión simple y cuando hay varias es regresión múltiple. Si la(s) variable(s) explicativas son categóricas estamos ante un análisis de la varianza o ANOVA, que al igual que antes puede ser unifactorial si solo hay una variable explicativa (one-way ANOVA) o multifactorial si hay más. Por último, si las variables explicativas son una combinación de categóricas y continuas estaremos antes un ANCOVA (análisis de la covarianza) [@cayuela2016]. Todos estos nombres hacen referencia a tipos de análisis de regresión que en R se pueden calcular con una única función (`lm(m)`).

## Supuestos de los modelos lineales

La aplicación de un modelo lineal queda supeditado al cumplimiento de una serie de supuestos.

-   **Independencia**: las observaciones y, por tanto, los residuos del modelo deben ser independientes entre sí. Las formas más comunes de violar el supuesto de independencia son la **autocorrelación** espacial, cuando distintas observaciones están más próximas entre sí que otras, y la autocorrelación temporal cuando se realizan distintas mediciones de la variable dependiente en los mismos individuos o parcelas a lo largo del tiempo. El supuesto de independencia está muy relacionado con el diseño del estudio. Se puede lidiar con la dependencia de las observaciones promediando el valor de las que sean dependientes entre sí o a través de modelos mixtos que tienen en cuenta la no independencia sin perder la variabilidad asociada a ella.

-   **Normalidad**: los modelos lineales asumen una distribución normal de los residuos del modelo. El criterio de normalidad se refiere a los residuos del modelo y no a la variable dependiente, aunque en gran parte la distribución de los residuos viene definida por la distribución de la variable dependiente. Por eso, una forma de cumplir el supuesto de normalidad es transformar la variable respuesta. Si nuestra variable dependiente son unos y ceros (presencia/ausencia o vivo/muerto), o bien es un conteo (nº individuos) los residuos de nuestro modelo lineal no van a ser normales. En estos casos específicos utilizaremos modelos lineales generalizados.

-   **Homocedasticidad**: se asume que la varianza es homogenea en todo el rango de la variable independiente. Esto implica que la varianza residual de nuestro modelo debe ser constante. La violación de este supuesto puede hacernos caer en errores de tipo I (falsos positivos). Para evaluar este aspecto se representan los residuos frente a los valores ajustados por el modelo. Uno de los principales problemas que suele haber es que los residuos aumenten conforme aumentan los valores ajustados por el modelo. Puede deberse a que alguna variable no se ha tenido en cuenta o bien a la presencia de *outliers* en nuestros datos. Una forma de lidiar con este aspecto es transformar la variable respuesta.

-   **Linealidad**: la relación entre la variable dependiente y la independiente es lineal o puede expresarse como una combinación lineal de parámetros.

## Fundamentos matemáticos de una regresión lineal simple

Asumiendo la hipótesis de que y se puede explicar como una función lineal de x, podemos expresar y como:

$$
Y = a + bX
$$

Al parámetro a se le denomina **intercepto** y es el valor de la variable respuesta cuando la variable independiente es igual a cero. Al parámetro b se le denomina **pendiente** y representa cuánto aumenta la variable respuesta por unidad de la variable independiente. Basta pues estimar los parámetros a y b para conocer el valor de la variable respuesta para cada valor de la variable independiente.

Para entender cómo se estiman tenemos que recordar que los datos de una regresión son tomados de manera pareada, es decir que en una misma observación tenemos un dato para la variable respuesta (y~i~) y para la variable independiente (x~i~). Sin embargo, los parámetros a y b son los mismos para todos los pares de datos por lo que al menos que nuestro modelo prediga con exactitud cada una de nuestras observaciones tendremos un error asociado al modelo. Dicho error o residuo (𝜀~𝑖~) es la diferencia entre el valor predicho de la variable respuesta (Ŷi) para un determinado valor de la variable independiente y el valor real observado de nuestra variable respuesta (y~i~) en dicha observación. Para cada observación tendremos:

$$
yi = a + bxi + 𝜀i
$$

Los “mejores” parámetros del modelo se estiman mediante **máxima verosimilitud**, es decir, dados los datos, el valor de los parámetros será aquel que haga los datos más verosímiles. Si los supuestos de los modelos lineales se cumplen, la máxima verosimilitud viene dada por el **método de los mínimos cuadrados.** El término mínimos cuadrados se refiere a la suma de los residuos al cuadrado. Los mejores parámetros del modelo serán aquellos que minimicen la **suma de los residuos cuadrados** del modelo (RSS - Residual Sum of Squares). La RSS representa la variabilidad que el modelo NO es capaz de explicar.

El **error del modelo** (residuos) es una variable aleatoria que sigue una distribución normal, de ahí el supuesto de normalidad, con media igual a cero y varianza 𝜎^2^ (= cuadrados medios residuales). Como vemos la suma cuadrada de residuos se divide por n-2, esto es debido a que ya hemos usado dos observaciones para calcular los dos parámetros del modelo (a y b). La varianza del error estará más cercana a cero cuando las observaciones estén más cerca de las predicciones, y se estima el valor *medio* de la RSS:

$$𝜎2 = RSS/n-2$$ Asociado a los errores del modelo podemos calcular el grado de ajuste del mismo para lo que se utiliza el **coeficiente de determinación** (R^~2~^), que se define como la fracción de la variabilidad de la variable respuesta explicada por la variación de la variable independiente. Si la variabilidad total de la variable respuesta es SSY (la suma de las diferencias entre y~i~ y la media de Y al cuadrado) y la parte no explicada por el modelo es RSS, definimos el coeficiente de determinación como:

$$R^2 = SSY-RSS / SSY$$ Al ser una proporción, el coeficiente de determinación se define entre 0 y 1, cuanto más se acerque a 1 mayor será la variabilidad explicada y mejor se ajustará nuestro modelo a los datos.

Los parámetros del modelo son realmente una estimación de los verdaderos valores de los parámetros poblacionales. Por ello, estos parámetros llevan asociados una incertidumbre. El siguiente paso es **testar estadísticamente si los parámetros estimados son estadísticamente distintos de cero**. Esto es especialmente importante para la pendiente ya que su significación nos indicaría que hay un efecto de la variable independiente sobre la variable respuesta. La hipótesis nula es que b no es diferente de cero. La significación de estos parámetros se comprueba mediante un t-test en la función `lm()` (evalúa la relación entre cada variable y la variable respuesta mientras se controlan las demás). Mediante F-ratio con `anova()` se evalúa la relación entre la variabilidad expicada por el modelo y la variabilidad explicada por esa variable (que puede tener varios parámetros asociados).

```{r lm_simple}

library(tidyverse)

cars |> 
  ggplot() +
  geom_point(aes(x = speed, y = dist)) +
  labs(x = "Velocidad (millas/h)", y = "Distancia de frenado (pies)")

m_cars <- lm(dist ~ speed, data = cars)

summary(m_cars)

resid(m_cars)
RSS <- sum(resid(m_cars)^2)
sigma2 <- RSS/(nrow(cars)-2) 
sqrt(sigma2)

SSY <- sum((cars$dist - mean(cars$dist))^2)
R2 <- (SSY-RSS)/SSY

anova(m_cars) 
# La tabla ANOVA tiene una serie de columnas que resumen la partición de la suma de cuadrados
# p-valor es de X, quiere decir que X de cada 10 veces obtendremos por azar un F-ratio igual al que hemos obtenido con las observaciones.
```

## Ajustando modelos lineales en R

### ANOVA

```{r anova}

# install.packages("performance")
library(performance)
# install.packages("emmeans")
library(emmeans)
# install.packages("")
library(sjPlot)
# install.packages("broom")
library(broom) #https://broom.tidymodels.org/articles/broom.html

pinos <- read_delim(file = "RxF_growth.csv", delim = ",",
           col_types = list(Irrig = "f",
             Fert = "f"))

# pinos contiene datos de un experimento en el que se plantaron 144 plántulas de Pinus pinea en 4 bloques en un campo abandonado y se sometieron a un experimento factorial con 4 niveles de riego (0, 150, 300 y 600 mm año⁻¹) y 3 tratamientos de fertilización nitrogenada (0, 150 y 300 kg N ha⁻¹) distribuidos aleatoriamente dentro de cada uno de los 4 bloques.

# Queremos saber si el incremento en diamétro (DI) estuvo condicionado por la irrigación

pinos

# Exploración de las variables

# Outliers

ggplot(pinos) +
  geom_boxplot(aes(y = DI)) 

ggplot(pinos) +
  geom_jitter(aes(y = DI, x = 1)) 
# no real outliers

# Normalidad y homogeneidad

ggplot(pinos) + #normal
  geom_histogram(aes(x = DI)) 

ggplot(pinos) +
  geom_boxplot(aes(x = Irrig, y = DI)) 

pinos |> 
  group_by(Irrig) |> 
  summarize(var = var(DI))

# Independencia?

ggplot(pinos) +
  geom_boxplot(aes(x = as.factor(Block), y = DI)) 


# Ajustamos un modelo lineal

m1 <- lm(DI ~ Irrig, data = pinos)
summary(m1)

# ¿Qué significa cada parámetro?
# intercept = media del nivel de referencia, variables dummy

pinos <- pinos |> 
  mutate(f1 = fitted(m1))

ggplot(pinos) +
  geom_point(aes(x = f1, y = DI)) +
  labs(y = "Observados", x = "Predichos")

# Tabla del anova

anova(m1)

# Irrig SumSq / (Irrig SumSq + Residuals SumSq) = R2 
3259.6/(3259.6+6744.8)

# Check residuals
x11()
check_model(m1)

# Pero... no hemos acabado
# Una de las principales razones de usar factores es conocer las diferencias entre los niveles del factor

paircomp <- emmeans::emmeans(m1, specs = pairwise ~ Irrig)
paircomp

# Representación del modelo

plot_model(m1, type = "pred", terms = "Irrig", show.data = TRUE, jitter = 0.5) +
  labs(title = "", 
    x = "Irrigation treatment", y = "Diameter increase (mm/year)") +
  theme_bw()

# Tablas de resultados

tidy(m1)
tidy(anova(m1))
augment(m1)
glance(m1)
```

### ANCOVA

```{r ancova}

encinas <- read_delim(file = "bellotas.csv", delim = ",",
           col_types = list(Competition = "f",
             Fert = "f"))

# encinas contiene información de 40 árboles adultos de encina (Quercus ilex). En alrededor de la mitad de ellos se eliminaron todas las plantas competidoras (herbáceas), dando lugar a dos tratamientos de competencia (sí y no). La mitad de las encinas en cada tratamiento de competencia se sometieron a fertilización durante tres años, mientras que la otra mitad se dejó como control. Después de 3 años, se midió el diámetro y se calculó el crecimiento como el aumento en diámetro (DI). La variable de respuesta fue la producción de bellotas por árbol.

# El nombre "Acorn " tiene un espacio
encinas <- encinas |> 
  rename(Acorn = `Acorn `)

# Nuestra hipótesis es que aquellos árboles que crezcan más también mostrarán una mayor producción de bellotas y que esta relación dependerá de la disponibilidad de recursos, es decir, más nutrientes y agua debido a la fertilización y la falta de competencia.

# Detección de outliers

ggplot(encinas) +
  geom_boxplot(aes(y = Acorn, x = 1)) 

ggplot(encinas) +
  geom_boxplot(aes(y = Acorn, x = Fert))

ggplot(data = encinas) +
  geom_boxplot(aes(y = Acorn, x = Competition))

# Normalidad y homogeneidad

ggplot(encinas) +
  geom_histogram(aes(x = Acorn), bins = 10) 

# Relaciones entre variables

ggplot(encinas) +
  geom_point(aes(x = Acorn, y = DI))

# Ajustamos un modelo, empezamos por uno sencillo

ancova1 <- lm(Acorn ~ Fert * DI, data = encinas)
summary(ancova1)
anova(ancova1)
check_model(ancova1)

# Interpretación de los parámetros

# Figura con la relación entre las variables continuas para cada nivel del tratamiento
plot_model(ancova1, type = "pred", terms = c("DI","Fert"), show.data = TRUE) +
  labs(title = "", 
    x = "Crecimiento", y = "Producción de bellotas") +
  theme_bw()

# Nuestra hipótesis es que la competencia también influye

ancova2 <- lm(Acorn ~ Competition * DI, data = encinas)
summary(ancova2)
check_model(ancova2)

plot_model(ancova2, type = "pred", terms = c("DI","Competition"), show.data = TRUE) +
  labs(title = "", 
    x = "Crecimiento", y = "Producción de bellotas") +
  theme_bw()

# 

ancova3 <- lm(Acorn ~ Fert * DI + Competition * DI, data = encinas)
summary(ancova3)
check_model(ancova3)

AIC(ancova1, ancova2, ancova3)

```

### Colinealidad en modelos lineales

VIF root of 1 / (1 Rj ), also called the variance inflation factor (VIF), whichmeans that the P-values get largermaking it more difficult to detect an effect El factor de inflación de la varianza proporciona una estimación cuantitativa de la multicolinealidad entre covariables en un análisis de regresión. Este índice mide hasta qué punto la varianza de un coeficiente de regresión estimado se incrementa a causa de la colinealidad. Si echamos un vistazo a la fórmula mediante la que se calcula la varianza asociada a la estimación de un parámetro mediante mínimos cuadrados veremos que a mayor R2 (más cercano a 1) mayor varianza asociada al parámetros. Hay que aclarar que este R2 es el cuadrado del coeficiente de correlación múltiple entre las variables independientes del modelo y no el coeficiente de determinación del mismo. En términos prácticos, si introducimos una variable en el modelo que aumenta la correlación entre las mismas significa que la información proporcionada por esta variable ya está incluida en el resto y además aumentamos la varianza asociada a la estimación de nuestros parámetros por lo que podemos estar influyendo la significación de los mismos. En cuanto a los valores de VIF a partir de los cuales hay que tomar en serio la colinealidad entre nuestras variables no existe un consenso claro. El límite más aceptado es el de 5, aunque algunos autores establecen este límite en 10. Sin embargo cuando nuestras variables no tienen un efecto muy marcada sobre nuestra variable respuesta, tener valores de VIF mayores de 3 podría suponer un problema ya que muchos de los parámetros podrían dejar de ser significativos. El procedimiento a seguir es calcular el VIF sobre las variables independientes presentes en el modelo y en caso de alta colinealidad eliminar aquella con un VIF superior y volver a calcular el VIF para cada covariable.

## Modelos lineales generalizados

## Modelos lineales mixtos

```{r}
# Modelos mixtos y generalizados

# Instalar paquetes (aquellos que no tengais) y cargadlos en R
library(tidyverse)
library(GGally)
library(performance)
library(sjPlot)
library(lme4)
library(lmerTest)
library(nlme)
library(AER)
library(MuMIn)

#setwd("C:\\Users\\user\\OneDrive - Universidad Complutense de Madrid (UCM)\\Data analysis\\CursoR")

#### 1. Conteo Poisson ####

# Importar datos
# Base de datos para estudiar el efecto de la composicion forestal y la disponibilidad
# de alimento sobre la abundacia de la ardilla roja en Escocia
# SqCones= n pinas comidas (variable dep)
# Ntrees= n trees per plot; DBH= mean tree DBH; TreeHeight= mean tree height; CanopyCover
SQ <- read_delim(file = "RedSquirrels.txt", delim = "\t") 
SQ

# Exploratory
outliers <- list(NULL)
for (i in 2:6){
  midf <- data.frame(a = SQ[[i]])
  outliers[[i-1]] <- ggplot(midf) +
    geom_boxplot(aes(y = a)) +
    labs(y = names(SQ)[i], x = "")
}

outliersplot <- patchwork::wrap_plots(outliers, nrow = 2)
outliersplot

# outlier en DBH
SQ2 <- SQ |> 
  filter(DBH < 0.7)

ggpairs(
  SQ |> select(SqCones, Ntrees, DBH, TreeHeight, CanopyCover),
  lower = list(
    continuous = wrap("smooth", method = "loess", color = "darkslategrey", alpha = 0.1)),
  diag = list(continuous = wrap("barDiag"))
)

SQ2 <- SQ2 %>% 
  mutate(Ntreess = as.vector(scale(Ntrees)),
         TreeHeights = as.vector(scale(TreeHeight)),
         CanopyCovers = as.vector(scale(CanopyCover)),
         DBHs = as.vector(scale(DBH)))

summary(SQ2)

# Modelo
mod <- lm(SqCones ~ Ntreess + DBHs + TreeHeights + CanopyCovers, 
  data = SQ2)
summary(mod)
check_model(mod)

# Ajustamos el modelo (conteo - poisson)
M1 <- glm(SqCones ~ Ntreess + DBHs + TreeHeights + CanopyCovers,
  family = "poisson", data = SQ2)
summary(M1)
(882.20 - 647.35) / 882.20 # devianza explicada

# Predicciones (Para una de las covariables)
plot_model(M1, terms = "Ntreess", show.data = TRUE, type = "pred")
plot_model(M1, terms = "DBHs", show.data = TRUE, type = "pred")
plot_model(M1, terms = "TreeHeights", show.data = TRUE, type = "pred")
plot_model(M1, terms = "CanopyCovers", show.data = TRUE, type = "pred")

# Check overdispersion 
summary(M1)
647.35/46
dispersiontest(M1)
check_overdispersion(M1)

# Zero-inflated, missing covariate, wrong error distribution, wrong link function???
x11()
check_model(M1)

# Residuals vs fitted
# Hay dos observaciones que influyen mucho y muchas cercanas a 1, demasiadas para quitarlas
# Cuando hay sobredispersion en poisson se suele usar una binomial negativa
M2 <- MASS::glm.nb(
  SqCones ~ Ntreess + DBHs + TreeHeights + CanopyCovers,
  data = SQ2,
  na.action = na.fail
)
summary(M2)

# Hay un nuevo parametro para la varianza theta
59.027/46 # Sin sobredispersión

x11()
check_model(M2)

# Model selection
dredge(M2)
M3 <- MASS::glm.nb(SqCones ~ CanopyCovers, data = SQ2, na.action = na.fail)

# Predicciones
p <- plot_model(M3, type = "pred", terms = c("CanopyCovers")) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha=0.3, fill="purple3")+
  geom_line(size = 0.8) +
  geom_point(data = SQ2, aes(y = SqCones, x = CanopyCovers), alpha = 0.5) +
  labs(y = "Nº de piñas comidas", x = "Cobertura de copa") +
  theme_bw() +
  theme(plot.title = element_blank(),
        axis.title = element_text(size = 16, 
                                  face = "bold"),
        axis.text = element_text(size = 14)) +
  theme(panel.grid = element_blank())

p

ggsave(filename="miGGplot.jpg", dpi = 1200, 
       plot = p, width = 100, height = 100, 
       units = "mm")

#### 2. Modelo presencia-ausencia ####

# Importar datos
# Heteromastus similis es un gusano marino, 
# modelamos su presencia (Hsimilis) en funcion de
# MedSand= porcentaje de arena
# Level = preferencia profundidad sustrato 
# Location= 3 areas con distintas condiciones ambientales
PO <- read_delim(file = "PolychaetaV3.txt", delim = "\t",
  col_types = list(Level = "f",
    Location = "f"))

PO

# Modelo
M1 <- glm(Hsimilis ~ MedSand * Level, data = PO, family = "binomial")
summary(M1)
M1.1 <- glm(Hsimilis ~ MedSand + Level, data = PO, family = "binomial")
AIC(M1, M1.1)
# Validacion modelo
x11()
check_model(M1)

# Predicciones
range(PO$MedSand)

plot_model(M1, terms = c("MedSand","Level"), show.data = TRUE, type = "pred")
plot_model(M1, terms = c("Level"), show.data = TRUE, type = "pred")

#### 3. Modelos mixtos ####

# Matriz de sitios x abundancias de especie
rikz <- read_delim(file = "DatosCursoR/RIKZ.txt", delim = "\t", 
  col_types = list(Beach = "f"))
rikz

# Calculamos la riqueza de especie, convirtiendo las abundancias en presencia y sumando
rikz$Richness <- apply(rikz[, 2:76] > 0, 1, sum)

# Modelo lineal
M1 <- lm(Richness ~ NAP, data = rikz)
summary(M1)

plot_model(M1, type = "pred", terms = "NAP", show.data = TRUE) +
  labs(x = "NAP", y = "Richness", title = "")
  
# Plots intercepto y pendiente distintas
M1.1 <- lm(Richness ~ NAP + Beach, data = rikz)
summary(M1.1)

rikz <- rikz |> 
  mutate(fit = M1.1$fitted.values)

ggplot(rikz) +
  geom_point(aes(x = NAP, y = Richness, color = Beach)) +
  geom_line(aes(x = NAP, y = fit, color = Beach))

M1.2 <- lm(Richness ~ NAP * Beach, data = rikz)
summary(M1.2)

rikz <- rikz |> 
  mutate(fit = M1.2$fitted.values)

ggplot(rikz) +
  geom_point(aes(x = NAP, y = Richness, color = Beach)) +
  geom_line(aes(x = NAP, y = fit, color = Beach))

summary(M1.1) # 10 parametros
summary(M1.2) # 18 parametros
AIC(M1,M1.1,M1.2)

# Modelo mixto
M2 <- lmer(Richness ~ NAP + (1|Beach), data = rikz)
summary(M2)
anova(M2)
# No p values si no cargamos el paquete lmerTest

# Usar lme
M2 <- lme(Richness ~ NAP, random = ~1|Beach, data = rikz)
summary(M2)
anova(M2)

# Simplificación del modelo
M2.1 <- lme(Richness ~ NAP, random = ~1|Beach, data = rikz, method = "REML")
M2.2 <- lme(Richness ~ 1, random = ~1|Beach, data = rikz, method = "REML")
AIC(M2.1,M2.2)

# Con efecto sobre la pendiente
M3 <- lme(Richness ~ NAP, random = ~NAP|Beach, data = rikz)
summary(M3)
anova(M3)

M3.1 <- lme(Richness ~ NAP, random = ~NAP|Beach, data = rikz, method = "REML")
AIC(M2.1, M3.1)

# Residuos
check_model(M3)

M3.2 <- lmer(Richness ~ NAP + (NAP|Beach), data = rikz)
check_model(M3.2)

#### 4. Modelo mixto generalizado ####

M4 <- glmer(Richness ~ NAP + (NAP|Beach), data = rikz, family=poisson)
summary(M4)

x11()
check_model(M4)

plot_model(M4, terms = "NAP", show.data = TRUE, type = "pred")

# Múltiples covariables - distancias de Cook

ggplot(data = wclam) + 
  geom_point(aes(x = log10(LENGTH), y = log10(AFD))) +
  labs(y = "Peso", x = "Longitud") 

m1 <- lm(log10(AFD) ~ log10(LENGTH), data = wclam) 
m2 <- lm(log10(AFD) ~ log10(LENGTH), data = wclam |> slice(-108)) # Otro sin 108

plot(m1, which = 4) # mayor de 1
plot(m2, which = 4)

check_outliers(m1)
x11()
check_outliers(m1) |> plot()
check_outliers(m2)

```
