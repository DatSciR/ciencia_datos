---
title: | 
  | Visualización y análisis exploratorio de datos
subtitle: "Curso: Programación y análisis estadístico en R. CADIC, Ushuaia, Argentina"
author: 
  - name: Verónica Cruz-Alonso 
    roles: "Profesora y autora del material"
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-depth: 4
toc-title: "Índice"
format:
  html:
    link-external-newwindow: true
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
bibliography: references.bib
---

## Objetivos del día 3

-   Aprender la filosofía y funciones básicas del paquete de visualización de datos {ggplot2}.

-   Entender funciones avanzadas de {ggplot2}.

-   Ser capaces de generar gráficos publicables en un artículo científico.

-   Aprender a explorar diferentes tipos de datos para su posterior análisis.

## Introducción a la visualización de datos

La visualización de datos es una disciplina cuyo fin es mapear datos de forma gráfica para comunicar un mensaje. En investigación se usa principalmente en los análisis exploratorios (durante la fase de entendimiento de los datos) y en la comunicación de los resultados.

La representación gráfica de nuestras ideas o resultados de investigación es esencial para comunicar de forma efectiva nuestra interpretación de los datos y es clave si queremos causar cierto impacto en el interlocutor. Algunos estudios sugieren que el tiempo medio que el usuario emplea en ojear una página web es de unos segundos, pero si hay algo que consigue atraer su atención entonces el tiempo se incrementa exponencialmente. Este atractor en el mundo científico puede ser un buen gráfico de resultados o un buen resumen gráfico.

![Esquema conceptual de un "buen gráfico" considerando la ejecución (cómo de bien está constituido) y la adecuación (qué estoy tratando de decir, a quién, dónde, por qué). Modificado de [Good Charts de Scott Berinato](https://scottberinato.com/good-charts-book/).](images/buen-grafico.png){width="469"}

En este bloque vamos a aprender como representar de manera efectiva muestros datos utilizando el paquete {[ggplot2](https://ggplot2.tidyverse.org/)} de *tidyverse*. {ggplot2} permite hacer gráficos razonablemente claros y estéticamente bonitos (es decir, bien ejecutados) con poco tiempo y un esfuerzo pequeño. Es extremadamente flexible y potente por lo que ha alcanzado gran popularidad.

{ggplot2} está escrito en R siguiendo la [gramática de gráficos (gg)](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448/ref=as_li_ss_tl). Por ello, al utilizarlo, el usuario tiene que pensar como cuando está haciendo un dibujo a mano y pensar en ir añadiendo diferentes capas a la creación. El flujo de trabajo es crear un gráfico vacío, añadir una capa con los datos, añadir una capa con las etiquetas, etc.

![Creación de una pintura por capas, como en la gramática de gráficos. https://www.donnacowan.ca/category/animated-gifs/](images/Buckley-Bay-Oil-Painting-Animation-6x8-2.gif){width="441"}

Como otros paquetes de *tidyverse*, {ggplot2} precisa de datos ordenados para que ejecutarse de forma óptima.

💡Recordamos que en una tabla de datos ordenados (*Tidy data*) cada columna representa una variable, cada fila es una observación y cada celda contiene un único valor.

## Elementos básicos en un gráfico de {[ggplot2](https://ggplot2.tidyverse.org/)}

Se necesitan tres capas básicas para crear un gráfico con {ggplot2}:

-   Los **datos** (*data*).

-   Las **geometrías** (*geom*): definen el tipo de gráfico (de puntos, de barras, etc.).

-   Los ***aesthetics***: características visuales de las geometrías (p. ej. la posición, el color) definidas por las variables de nuestros datos.

Las capas se conectan entre sí con el símbolo `+`, que siempre debe ir colocado al final de la línea de código si queremos seguir añadiendo capas al gráfico. Todas las capas que se pueden incluir están recogidas en la [cheat sheet de {ggplot2} de Posit](https://diegokoz.github.io/intro_ds/fuentes/ggplot2-cheatsheet-2.1-Spanish.pdf).

💡 Se utiliza el símbolo `+` porque {ggplot2} es anterior al *pipe* (`|>`) y cambiar `+` por el *pipe* requeríría muchos reajustes en un montón de paquetes.

```{r capas_basicas}
#| warning: false

# install.packages("titanic")
library(tidyverse)

#Cargamos los datos
titanic <- titanic::titanic_train 

head(titanic)
# PassengerId: Id del pasajero
# Survived: 1-si, 0-no
# Pclass: clase del pasajero
# Name: nombre Name
# Sex: sexo
# Age: edad
# SibSp: numero de hermanos + parejas a bordo
# Parch: numero de progenitores + hijos a bordo
# Ticket: numero de billete
# Fare: tarifa
# Cabin: camarote
# Embarked: puerta de embarque

ggplot(data = titanic)

ggplot(data = titanic, aes(x = Age, y = Fare)) 

ggplot() + 
  geom_point(data = titanic, aes(x = Age, y = Fare)) #Los datos se pueden colocar dentro de la funcion ggplot si se van a usar los mismos en todas las geometrias

ggplot() + 
  geom_jitter(data = titanic, aes(x = Pclass, y = Fare))

# Se pueden combinar varias geometrias

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare)) + 
  geom_smooth(aes(x = Age, y = Fare))

# Como guardar plots satisfactorios

plotqmegusta <- ggplot() + 
  geom_point(data = titanic, aes(x = Age, y = Fare))

ggsave(filename = "farebyage.jpg", plot = plotqmegusta, width = 12, height = 9, units = "cm", dpi = 300)

ggsave(filename = "farebyage.pdf", plot = plotqmegusta, width = 12, height = 9, units = "cm")

```

💡Algunas revistas científicas dan especificaciones muy detalladas sobre cómo tienen que ser los gráficos (p. ej. [Science](https://www.science.org/content/page/instructions-preparing-initial-manuscript#preparation-of-figures)). Cuando no tenemos una referencia clara recomendamos pensar en formato A4 (21 x 29,7 cm) y que todos los elementos visuales del gráfico queden visibles cuando se guarda dentro de estos límites de tamaño.

#### Ejercicio

Representa un gráfico para ver la relación entre el sexo de los pasajeros y la clase con la base de datos titanic.

### Aesthetics vs. argumentos

Los aesthetics cambian cada elemento de las geometrías. Los argumentos estéticos cambian toda la geometría en conjunto.

```{r aes_arguments}
#| warning: false

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare, color = Sex))

# No es lo mismo que... 

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare), color = "darkred") 
```

En la ayuda de las funciones de {ggplot2} aparece una lista de los *aesthetics* y los argumentos estéticos que acepta esa función. Se pueden incluir tantos *aesthetics* como se deseen.

```{r aes}
#| warning: false

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare, size = Pclass, shape = Sex, color = Embarked))

summary(titanic$Pclass)

titanic <- titanic |> 
  mutate(Pclass = factor(Pclass, levels = c(3, 2, 1), 
    labels = c("Tercera", "Segunda", "Primera")))

summary(titanic$Pclass)

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare, size = Pclass, shape = Sex, color = Embarked), alpha = 0.5)

```

#### Ejercicio

¿Cómo modificarías el siguiente código para representar la puerta de embarque con diferentes formas pero los puntos de color rosa?

```{r ejer_2}
#| warning: false

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare))

```

## {Ggplot2}: funciones avanzadas

<!--# ver la chuleta de ggplot2 -->

### Etiquetas

```{r etiquetas}
#| warning: false  

pnumcat <- ggplot(data = titanic) +    
  geom_boxplot(aes(x = Pclass, y = Age))  
pnumcat  

pnumcat +    
  labs(title = "Edad de los pasajeros según su clase",      
    x = "Clase",      
    y = "Edad (años)") #title, subtitle, x, y, caption
```

### Sistema de coordenadas

El sistema de coordenadas por defecto en un gráfico de `ggplot()` es el cartesiano. Si queremos hacer zoom en nuestro gráfico tendremos que cambiar los límites del sistema de coordenadas.

```{r coords}
#| warning: false  

pnumcat +   
  coord_cartesian(ylim = c(0, 100))  
```

#### Ejercicio

Cambia la posición de los ejes X e Y en el sistema de coordenadas de pnumcat.

### Faceting

Los *facets* dividen el gráfico en subgráficos basados en el valor de una o varias variables categóricas. Las facetas son muy útiles en exploración de datos. Hay dos funciones para facetar: `facet_grid()` y `facet_wrap()`.

```{r facet_1}
#| warning: false  

miplot <- ggplot(data = titanic,    
  aes(x = Age, y = Fare, color = Sex)) +    
  geom_point()  
miplot  

miplot +    
  facet_grid(Pclass~., scales = "free")  

miplot +    
  facet_grid(Pclass~Embarked)  

miplot +    
  facet_wrap(Embarked~., ncol=3)

```

### Posición

Con las funciones y argumenos de posición podemos recolocar geometrias que de otro modo ocuparían el mismo espacio.

```{r posicion}
#| warning: false  

ggplot(data = titanic) +    
  geom_bar(aes(x = Pclass, fill = Sex))  

ggplot(data = titanic) +    
  geom_bar(aes(x = Pclass, fill = Sex), 
    position = "dodge") #esquivar  

ggplot(data = titanic) +    
  geom_bar(aes(x = Pclass, fill = Sex), 
    position = "fill") #rellenar 
```

### Escalas

Sirven para personalizar los *aesthetics*. Las funciones de la familia `scale` siempre tienen la misma estructura: scale \_ aesthetic que se personaliza \_ tipo de escala (p. ej. continua, discreta, manual, etc.).

```{r escala}
#| warning: false  

miplot +
  scale_color_manual(values = c("darkgreen", "chartreuse")) +
  scale_y_sqrt(breaks = c(9, 16, 25), labels = c("a", "b", "c"))  
```

👀 Un error muy común es cambiar los ejes del gráfico con las funciones `scale_x_continuous()` o `scale_y_continuous()` cuando lo que queremos es hacer zoom. Fijate en las diferencias en el siguiente ejemplo.

```{r plot_limits}
#| warning: false  

ggplot(data = titanic) +    
  geom_boxplot(aes(x = Pclass, y = Age))  

ggplot(data = titanic) +    
  geom_boxplot(aes(x = Pclass, y = Age)) + 
  scale_y_continuous(limits = c(10, 80))  

ggplot(data = titanic) +    
  geom_boxplot(aes(x = Pclass, y = Age)) +   
  coord_cartesian(ylim = c(10, 80)) 
```

#### Ejercicio

¿Qué harías para cambiar la escala de la edad a un degradado de colores de azul a amarillo en el siguiente gráfico?

```{r ejer}

ggplot(data = titanic, aes(x = Age, y = Fare, color = Age)) +   
  geom_point(size = 3)  
```

### Los colores en R

Las paletas de colores tipo *manual* y *gradient* se personalizan con el nombre o código del color.

💡Con [esta herramienta](https://r-charts.com/colors/) puedes elegir entre cientos de colores y con [esta](https://medialab.github.io/iwanthue/) crear tu propia paleta.

Las paletas tipo *brewer* y *distiller* utilizan paletas de colores que pueden ser secuenciales, cualitativas o divergentes, que aunque tienen utilidad en gran variedad de situaciones, están diseñadas para trabajar [con mapas o a escalas pequeñas](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3).

Las paletas HCL (*hue-chroma-luminance*) son paletas muy populares que tienen su propia función (p. ej. colores para representar batimetría). De entre ellas, *Viridis* se he vuelto muy popular porque está diseñada para que personas con distintos tipos de daltonismo puedan distinguir los colores.

```{r paletas}
#| warning: false  

RColorBrewer::display.brewer.all()   
RColorBrewer::brewer.pal(name = "Set3", n = 6) # para crear paleta  

grDevices::hcl.pals() # HCL Palettes   

# X11() 
# example("hcl.colors") 
# hcl.colors(n = 6, palette = "Lajolla") # para crear paleta 

# Viridis   
ggplot(data = titanic, aes(x = Age, y = Fare, color = Age)) +
  geom_point() +    
  scale_color_gradientn(colours = hcl.colors(12, "viridis")) 

ggplot(data = titanic, aes(x = Age, y = Fare, color = Age)) +    
  geom_point() +    
  scale_color_viridis_c()
```

💡[Aquí](https://ggplot2-book.org/scales-colour) puedes encontrar más información sobre cómo utilizar colores en {ggplot2}.

### Temas

`theme()` permite la personalización completa de todos los elementos del gráfico. Los argumentos dentro de la función definen la parte del gráfico a cambiar. Se les asigna una función de cambio según el elemento a cambiar dentro de esa parte (parte.del.gráfico = elemento_a_cambiar(...)): *line*, *rect*, *text*.

```{r theme}
#| warning: false  

?theme  
miplot +    
  theme(axis.title.x = element_text(color = "red", face = "bold"))  
```

#### Ejercicio

Dibuja una linea negra que represente los ejes de miplot y quita el fondo del gráfico.

Existen temas configurados por defecto y un asistente que te ayuda a personalizar el gráfico.

```{r temas_defecto}
#| warning: false  

miplot + theme_classic()  
miplot + theme_light()  
miplot + theme_void() 
```

#### GgthemeAssist

```{r theme_assist}

# install.packages("ggThemeAssist")  
miplot
```

## Gráficos multipaneles

La librería {patchwork} permite añadir gráficos ([y también tablas](https://www.tidyverse.org/blog/2024/09/patchwork-1-3-0/)) entre sí como si fueran diferentes capas.

```{r patchwork}
#| warning: false  

# install.packages("patchwork") 
library(patchwork)  

miplot + pnumcat 
miplot / pnumcat   
miplot / pnumcat +    
  plot_annotation(tag_levels = "a", tag_suffix = ")")  
```

En [este enlace](https://patchwork.data-imaginist.com/articles/guides/layout.html) puedes ver cómo personalizar mucho más la disposición de los diferentes elementos de la composición.

## Enlaces de interés sobre visualización de datos

-   [Guía de {ggplot2} de Posit](https://diegokoz.github.io/intro_ds/fuentes/ggplot2-cheatsheet-2.1-Spanish.pdf)

-   [Construye un gráfico capa a capa](https://rpubs.com/hadley/ggplot2-layers)

-   [Elegant graphics for data analysis](https://ggplot2-book.org/)

-   [Tutorial de {ggplot2} de Cedric Scherer](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)

-   [Effective Visual Communication for the Quantitative Scientist](https://ascpt.onlinelibrary.wiley.com/doi/full/10.1002/psp4.12455)

-   [Graphics principles](https://graphicsprinciples.github.io/): el tipo de gráfico que escojamos va a depender del tipo de variable y del mensaje que queramos transmitir (es decir, del propósito).

## La exploración de datos y su importancia

Cuando queremos entender y/o predecir un patrón o un proceso (variable dependiente o respuesta; *y*), lo modelizamos en función de otras variables que pensamos que lo explican o lo predicen (variables independientes, covariables o explicativas; *x*). Todas ellas pueden ser a su vez **cualitativas o cuantitativas**.

![Tipos de variables](images/tipos_variables.png)

La exploración de datos puede llevar hasta el 50% del tiempo de análisis. Es imprescindible para evitar errores tipo I (determinar que hay relación entre dos variables cuando no existe), errores tipo II (determinar que no hay relación entre dos variables cuando existe), encontrar patrones no lineales o evitar que el resultado esté determinados por unos pocos puntos discordantes (*outliers*). A continuación nos vamos a enfocar en herramientas gráficas para la exploración de variables cualitativas y cuantitativas aunque también mostraremos test estadísticos que pueden servir (de normalidad, homogeneidad, etc.). Seguiremos el protocolo de análisis exploratorio de datos publicado por @zuur2010.

### Detección de outliers

#### En una variable

```{r outliers_one}
#| warning: false

# Boxplots
ggplot(data = titanic) + 
  geom_boxplot(aes(y = Age))

# Jitter
ggplot(data = titanic) + 
  geom_jitter(aes(x = 1, y = Age))
# group = 1 hace que considere toda la variable como un todo

library(palmerpenguins)

# Cleveland plot
penguins |> 
  mutate(orden = 1:nrow(penguins)) |> 
  ggplot() + 
  geom_point(aes(x = body_mass_g, y = orden)) +
  theme(panel.grid = element_blank(),
    panel.grid.major.y = element_line(size = 0.1, color = "grey90"), 
    panel.background = element_rect(fill = "white", color = "black")) 

```

#### Outliers condicionales

```{r outliers_dos}
#| warning: false 

# De variables continuas codicionados por variables categóricas

# Cleveland plot por grupos
penguins |> 
  group_by(island) |> 
  mutate(orden = 1:n()) |> 
  ggplot() + 
  geom_point(aes(x = body_mass_g, y = orden, col = island)) +
  facet_grid(island ~ ., scales = "free_y", space = "free_y") + 
  theme(panel.grid = element_blank(),
        panel.grid.major.y = element_line(size = 0.1, color = "grey90"), 
    panel.background = element_rect(fill = "white", color = "black"),
        legend.position = "none")

# Boxplot
ggplot(data = titanic) + 
  geom_boxplot(aes(x = Pclass, y = Age)) 

# De variables continuas codicionados por otras variables continuas

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare))

```

#### ¿Qué podemos hacer con los outliers?

```{r outliers_gestion}
#| warning: false

# Identificar outliers: ¿a qué observación pertenecen?

# install.packages("plotly")
library(plotly)

# ggplotly(miplot) 

titanic |> 
  mutate(orden = 1:nrow(titanic)) |> 
  ggplot() + 
  geom_point(aes(x = Age, y = Fare)) +
  geom_text(aes(x = Age, y = Fare, label = orden), col = "red", size = 2) 

# Tras su identificación podemos: ¿quitarlos?, ¿ignorarlos?, comprobar los residuos del modelo que ajustemos para estas observaciones, ajustar el modelo con y sin estos datos, transformar la variable.

# Gestionar outliers con transformaciones

pellets <- read_delim(file = "pellets.txt") 
# Longitud y peso de heces de un gusano marino

ggplot(data = pellets) +
  geom_boxplot(aes(y = Length)) 

ggplot(data = pellets) +
  geom_boxplot(aes(y = log10(Length))) 

# Esta transformación acorta distancia en valores altos (quita outliers)
# pero alarga distancias en valores bajos, sobre todo cuanto más cerca de 0 

```

### Normalidad y homogeneidad de Y

Los supuestos de normalidad y homogeneidad en las regresiones lineales deberían comprobarse sobre los residuos (diferencia entre el valor observado y el valor predicho) de la regresión a lo largo de las variables explicativas. Sin embargo, para esto necesitaríamos tener muchas observaciones en cada valor de la variable explicativa. En ecología esto rara vez ocurre así que se acaban comprobando los supuestos sobre el total de los residuos. También se exploran las variables respuesta en este sentido, ya que si estas son normales y homogéneas es probable que los residuos también lo sean.

![Visualización de las asunciones de normalidad y homogeneidad en regresiones lineales. Los puntos representan los valores observados y la línea es la línea de regresión. En cada valor de la covariable asumiminos que las observaciones están distribuidas de forma normal y con la misma dispersión. Extraido de @zuur2010.](images/clipboard-1650594255.png){#sup width="367"}

```{r homogeneidad}
#| warning: false

# Una variable respuesta en las categorias de otra explicativa

ggplot(data = titanic) + 
  geom_boxplot(aes(y = Fare, x = Pclass), alpha = 0.7)

# La relación de dos variables en las categorias de otra

ggplot(data = penguins) + 
  geom_point(aes(y = body_mass_g, x = flipper_length_mm)) +
  facet_wrap(.~species)

# Test de homogeneidad

# instal.packages(lawstat)
library(lawstat)

bartlett.test(Fare~Pclass, data = titanic) 
# p < 0.05 se rechaza hipótesis nula 
# H0: distribución de la variable = distribución homogénea

lawstat::levene.test(y = titanic$Fare, group = titanic$Pclass)

# Pensar en los plots, en los residuos del modelo y no fiarse 100% de estos tests

```

```{r normalidad}
#| warning: false

# Histogramas y curvas de densidad para una variable

ggplot(data = titanic) + 
  geom_histogram(aes(x = Age))

ggplot(data = titanic) + 
  geom_density(aes(x = Age))

ggplot(data = titanic) + 
  geom_boxplot(aes(x = Age))

#Con variables cualitativas

summary(titanic$Pclass)

ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass))

# Una variable en las categorias de otra

titanic |> 
  ggplot() +
  geom_histogram(aes(x = Age), bins = 20) +
  facet_grid(Pclass~.) 

ggplot(penguins) +
  geom_density(aes(x = body_mass_g), color = "darkred") +
  geom_density(aes(x = body_mass_g, group = island, linetype = island))

# Q-Q plots 

ggplot(titanic) +
  geom_qq(aes(sample = Age)) +
  geom_qq_line(aes(sample = Age), color = "darkred") +
  labs(x = "Cuantiles teóricos", y = "Edad")

ggplot(titanic) +
  geom_qq(aes(sample = Age)) +
  geom_qq_line(aes(sample = Age), color = "darkred") +
  labs(x = "Cuantiles teóricos", y = "Edad") +
  facet_grid(.~Pclass)

# Tests de normalidad 

a <- rnorm(800, mean = 0, sd = 1) # Creo dos variables normales y estandarizadas 
b <- rnorm(50, mean = 0, sd = 1)

hist(a)
hist(b)

shapiro.test(a) # p < 0.05 se rechaza hipótesis nula 
# H0: distribución de la variable = distribución normal
shapiro.test(b)

ks.test(a, "pnorm") # Kolmogorow-Smirnoff
ks.test(b, "pnorm")

# OJO No se recomienda usar tests para comprobar el supuesto de la normalidad de los residuos/variables, ya que están muy sesgados al número de observaciones. Además, también se permite cierta desviación de la normalidad en los residuos. Los tests son muy restrictivos

```

#### Ejercicio

-   Describe la distribución de las tarifas pagadas por los pasajeros con la base de datos titanic.

-   Haz un histograma de las tarifas y cambia el número de intervalos para ver como cambia la distribución de la variable.

### Cantidad de ceros

```{r ceros}

# En una variable

titanic |> 
  ggplot() + 
  geom_bar(aes(x = SibSp == 0))

# En una variable respecto a la otra

titanic |> 
  ggplot() + 
  geom_count(aes(x = SibSp == 0, y = Parch == 0))

```

### Relaciones entre variables

La **colinealidad** es la existencia de correlación entre covariables de un modelo. Un ejemplo típico en ecología es la altitud con la precipitación o la temperatura. Si se ignora puede ocurrir que no haya nada significativo en el modelo o situaciones absurdas como que al quitar una covariable, el resto se hagan significativas. Si introducimos una variable en el modelo correlacionada con otras significa que la información proporcionada por esta variable ya está incluida en el resto y, además, aumentamos la varianza asociada a la estimación de nuestros parámetros por lo que podemos estar influyendo la significación de los mismos.

Aparte de las relaciones entre covariables, es necesario explorar las **relaciones entre la variable respuesta y las explicativas**, sobre todo para encontrar posibles patrones no lineales que gestionar en los modelos de regresión lineal. Explorando las relaciones entre la variable respuesta y alguna explicativa en los niveles de otras variables explicatvas podremos explorar **interacciones**.

#### Variables cualitativas

```{r dos_cat}
#| warning: false

ggplot(data = titanic) + 
  geom_count(aes(x = Sex, y = Survived))

titanic <- titanic |> 
  mutate(Survived = factor(Survived, levels = c(0, 1), labels = c("Muerto", "Vivo")))

ggplot(data = titanic) + 
  geom_count(aes(x = Sex, y = Survived))

table(titanic$Sex, titanic$Survived)

```

#### Ejercicio

Haz un gráfico para explorar la relación entre la clase del billete y la supervivencia con la base de datos titanic.

#### Variables cuantitativas

```{r dos_num}
#| warning: false

pnum <- ggplot(data = titanic, aes(x = Age, y = Fare)) + 
  geom_point(alpha = 0.5)

pnum

pnum + 
  geom_smooth()

# Relación entre variables en los niveles de una tercera

pnum + 
  geom_smooth() +
  facet_grid(.~Pclass)
```

Cuando encontramos relaciones no lineales, podemos **transformar la variable explicativa** para mejorar la linealidad con `log()`, `sqrt()`, etc. Esto puede reducir el peso de los outliers y mejorar también la normalidad y homogeneidad de los residuos. Las desventajas son que la transformación puede afectar a la relación entre X e Y y entre las covariables y sus interacciones y es necesario deshacer la transformación a la hora de representar.

#### Variable cualitativa vs. cuantitativa

```{r cat_num}
#| warning: false

ggplot(data = titanic) + 
  geom_boxplot(aes(x = Pclass, y = Age))

ggplot(data = titanic) + 
  geom_violin(aes(x = Pclass, y = Age), draw_quantiles = 0.5) 

ggplot(data = titanic) + 
  geom_violin(aes(x = Pclass, y = Age, fill = Sex), draw_quantiles = 0.5)

```

💡Echa un vistazo al paquete {[ggdist](https://mjskay.github.io/ggdist/)} y los [raincloud plots](https://www.cedricscherer.com/2021/06/06/visualizing-distributions-with-raincloud-plots-and-how-to-create-them-with-ggplot2/) para combinar diferentes geoms relacionadas con la distribución de los datos.

#### Múltiples covariables

[ggpairs()](https://ggobi.github.io/ggally/reference/ggpairs.html) de {GGally} permite hacer **gráficos multipanel** donde, de un vistazo, se ve la distribución de cada variable dentro de una base de datos y la relación de las variables todas entre sí. Es muy útil en exploración de datos.

```{r pairs}
#| warning: false

# install.packages("GGally")
library(GGally)

penguins |> select(bill_length_mm:body_mass_g) |> 
  ggpairs()

penguins |> select(bill_length_mm:body_mass_g, sex) |> 
  filter(!is.na(sex)) |> 
  ggpairs(aes(color = sex),
  lower = list(continuous = wrap("smooth", method = "loess", color = "darkslategrey", alpha = 0.1)),
  diag = list(continuous = wrap("barDiag")))

```

Los **correlogramas**, gráficos cuadrados o triangulares que representan matrices de correlaciones entre variables, son muy útiles para resumir en un vistazo las relaciones entre las variables de una base de datos. En [este artículo](https://rpubs.com/Alema/1000474) encontrarás tutoriales para realizarlos utilizando diferente paquetes.

```{r corr}

penguins_cor <- penguins |> select(bill_length_mm:body_mass_g) |> 
  na.omit() |> 
  cor() 

# install.packages("corrplot")

library(corrplot)
corrplot(penguins_cor)
```

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
