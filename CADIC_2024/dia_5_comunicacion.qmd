---
title: | 
  | Programaci√≥n y an√°lisis estad√≠stico en R
subtitle: "An√°lisis de datos: modelos lineales habituales en ecolog√≠a"
author: 
  - name: Ver√≥nica Cruz-Alonso 
    role: Profesora y autora del material
  - name: Julen Astigarraga
    role: Autor del material
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-depth: 4
toc-title: "√çndice"
format:
  html:
    link-external-newwindow: true
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

## Objetivos del d√≠a 5

-   Aprender las bases de la programaci√≥n literaria en R

-   Aprender los fundamentos b√°sicos de R Markdown y Quarto, as√≠ como sus diferencias

-   Generar documentos reproducibles en R

![Modelo de ciencia de datos de Hadley Wickham, Mine √áetinkaya-Rundel y Garrett Grolemund. Traducido de https://r4ds.hadley.nz/intro#fig-ds-diagram](images/datascience.png){#fig-datascience}

## R Markdown

R Markdown (<https://rmarkdown.rstudio.com/>) empez√≥ en 2012 con el objetivo de facilitar la reproducibilidad en R. Ha sido desarrollado principalmente por [Yihui Xie](https://yihui.org/). R Markdown es un formato de archivo para crear documentos din√°micos con R que se apoya en [`knitr`](https://yihui.org/knitr/) (paquete para generaci√≥n de informes din√°micos en R) y [Pandoc](https://pandoc.org/) (conversor de documentos).

R Markdown utiliza programaci√≥n literaria, un paradigma de programaci√≥n creado por Donald E. Knuth que consiste en escribir la l√≥gica del programa en un lenguaje humano (p. ej. ingl√©s, castellano) con fragmentos de c√≥digo e instrucciones. R Markdown est√° escrito en Markdown y contiene partes de c√≥digo de R (o alg√∫n otro lenguaje de programaci√≥n) integrado. Algunas de las razones por las que es recomendable utilizar R Markdown son la reproducibilidad, el aumento de la eficiencia de trabajo (a medio-largo plazo), centrarse en el texto sin perder tiempo en el dise√±o y la producci√≥n de documentos de alta calidad.

### Fundamentos b√°sicos de R Markdown

Para crear un archivo R Markdown: *File -\> New File -\> R Markdown*. Debemos cambiar el modelo mental: ahora tendremos un documento fuente de texto plano y a partir de dicho documento generamos un documento renderizado. Estos archivos tienen tres componentes principales: (i) metadatos, (ii) texto, (iii) c√≥digo.

-   Metadatos: se escriben entre `` `---` `` al comienzo del archivo. Utiliza la sintaxis de [YAML](https://en.wikipedia.org/wiki/YAML) (Yet Another Markup Language). Se utiliza para evitar teclear manualmente todas las opciones que pueden afectar al c√≥digo, al contenido y al proceso de renderizado cada vez que renderizamos el archivo. ¬°La sangr√≠a es importante!

-   Texto: sintaxis Markdown. Markdown es un formato de texto plano que est√° dise√±ado para ser f√°cil de escribir y, a√∫n m√°s importante, f√°cil de leer.

-   C√≥digo (dos tipos):

    -   Code chunk (bloque de c√≥digo): se escribe ```` ```{r} codigo aqui``` ````; entre corchetes se indica el lenguaje. Se puede escribir manualmente, utilizar el atajo `Ctrl + Alt + I` (OS X: `Cmd + Option + I`), utilizar el comando `Insert -> Executable Cell` en la barra de herramientas del editor o utilizar la paleta de comandos `Ctrl + Shift + P` (OS X `Cmd + Shift + P`).

    -   Inline (en l√≠nea): se escribe `r "c√≥digo aqu√≠"`.

Para compilar un archivo, se ejecuta el bot√≥n de `Render` o `Knit` en RStudio (atajo: `Ctrl + Shift + K`; OS X `Cmd + Shift + K`), que llama a Quarto/R Markdown render en un trabajo de fondo. Esto evita que el renderizado abarrote la consola de R, y as√≠ es f√°cil de detener.

üí° Con el editor visual de RStudio puedes ver en tiempo real c√≥mo es la conversi√≥n a word, HTML, etc.

Opciones de chunk: <https://bookdown.org/yihui/rmarkdown/r-code.html>

Son compatibles con muchos lenguajes de programaci√≥n:

```{r reticulate, echo = FALSE, eval = TRUE, warning = FALSE}

library(knitr)

names(knitr::knit_engines$get())

library(reticulate) # for python

```

```{python}

x = "R mola!"

print(x.split(" "))

```

```{r example}

library(ggplot2)
names(cars)

ggplot(cars, aes(speed, dist)) +
  geom_point() +
  geom_smooth()

```

Para buscar ayuda: *Help -\> Markdown Quick Reference* (italics, bold, headers, lists, links, images, R codes, tables, page break, superscripts...)

Referencias: [@blischak2016]

Formato: **negrita**, *cursiva*, sub√≠ndice~1~, super√≠ndice^2^, codes, [hyperv√≠nculo](https://bookdown.org/yihui/rmarkdown/markdown-syntax.html), notas al pie[^1]

[^1]: hello world

T√≠tulos: \# primer nivel; \## segundo nivel...

Listas y sublistas: \*, -, +

Citas:

> "R Markdown es maravilloso pero ojo con Quarto"
>
> --- Julen Astigarraga

F√≥rmulas:

$f(os) = {esta \choose gustando} esto^{?} (1-p)^{n-k}$

Comentarios:

<!--# esto es un comentario (atajo: Ctrl + Shift + C; OS X Cmd + Shift + C)-->

Tablas:

| Col1 | Col2 | Col3 |
|------|------|------|
|      |      |      |
|      |      |      |
|      |      |      |

: Esto es el pie de tabla

Figuras:

![Esto es el pie de figura](images/rmarkdown.png){width="30%"}

Videos:

::: {#fig-repro}
<iframe width="560" height="315" src="https://www.youtube.com/embed/s3JldKoA0zw">

</iframe>
:::

#### Ejercicio

Genera un documento R Markdown que est√© compuesto por al menos metadatos, c√≥digo y texto. Tambi√©n puedes a√±adir otros elementos, como tablas.

## Quarto

Quarto (<https://quarto.org/>) es un sistema de publicaci√≥n cient√≠fica y t√©cnica de c√≥digo abierto construido sobre Pandoc. Convierte los formatos de texto plano o los formatos mixtos (p. ej. `.qmd`, `.Rmd`, `.md`, `.ipynb`) en informes est√°ticos PDF, word, HTML, etc. Puede entrelazar texto narrativo y c√≥digo para producir resultados con un formato elegante en forma de documentos, p√°ginas web, entradas de blog, libros, etc.

La extensi√≥n de Quarto es `.qmd` y utiliza filtros Lua que es el lenguaje de extensi√≥n de Pandoc (<https://quarto.org/docs/extensions/lua.html>). Para ello, Quarto utiliza un *engine* como `knitr` para ejecutar el c√≥digo y generar una salida temporal `.md`. El archivo `.md` se procesa mediante Pandoc y los filtros Lua de Quarto + Bootstrap CSS para HTML o LaTeX para PDF.

![Figura de jthomasmock.github.io/quarto-2hr-webinar](images/qmd-universe.png)

### R Markdown vs. Quarto

La diferencia principal de Quarto respecto a R Markdown es que se ha generado para la colaboraci√≥n de m√°s de una comunidad (es decir, no solo usuarios de R o Python) y utiliza una sintaxis y formato compartido entre distintos lenguajes. Adem√°s, a medida que se a√±ad√≠an m√°s capacidades a R Markdown a trav√©s de paquetes externos de R, la sintaxis para las tareas b√°sicas se volv√≠a incoherente.

![Diagrama de funcionamiento de R Markdown. Figura de [jthomasmock.github.io/quarto-2hr-webinar](https://jthomasmock.github.io/quarto-2hr-webinar/)](images/knitr-diagram-rmd.png)

![Diagrama de funcionamiento de Quarto. Figura de [jthomasmock.github.io/quarto-2hr-webinar](https://jthomasmock.github.io/quarto-2hr-webinar/)](images/knitr-diagram-qmd.png)

![Diagramas de funcionamiento de Quarto. Figura de jthomasmock.github.io/quarto-2hr-webinar](images/knitr-diagram-qmd-jupyter.png)

Algunas diferencias entre Quarto y R Markdown en cuanto al c√≥digo (chunks):

-   Estructura de las opciones tipo `key: value`. Las [opciones de los chunks](https://quarto.org/docs/computations/execution-options.html) son similares a las de R Markdown.

-   `#|` sintaxis *(hash pipe)*. Esta es la sintaxis preferida de Quarto, aunque es compatible con la sintaxis anterior de R Markdown. El *hash pipe* le a√±ade m√°s consistencia entre los *engine* (Jupyter, knitr) y nos da m√°s control sobre el orden o espacio de las opciones del chunk (no est√° limitado a una l√≠nea de opciones). No hay ning√∫n atajo para un *hash pipe* pero si escribes uno los siguientes se a√±adir√°n autom√°ticamente cuando le das a enter.

-   Tabulaci√≥n enriquecida: inicias una palabra y tabulas para completar o `Ctrl + espacio` para ver todas las opciones disponibles.

```{r tabulacion}
#| eval: false
2 * 2
```

-   Baterias incluidas: Quarto viene preinstalado con las √∫ltimas versiones de RStudio. No se tiene que instalar diferentes paquetes para crear diferentes formatos de salida: <https://quarto.org/docs/output-formats/all-formats.html>

### ¬øPor qu√© utilizar Quarto en lugar de R Markdown?

-   Baterias incluidas

-   Sintaxis compartida (elige tu propio editor y lenguaje preferido)

-   Mejores caracter√≠sticas y m√°s mejoras en el futuro (R Markdown todav√≠a se mantiene, pero la mayor√≠a de las nuevas caracter√≠sticas ser√°n incorporadas en Quarto)

#### Ejercicio

Genera un documento Quarto que tambi√©n est√© compuesto por al menos metadatos, c√≥digo y texto. ¬øQu√© diferencias observas respecto al de R Markdown?

### Renderizaci√≥n

Existen tres formas para renderizar un documento en Quarto:

1.  Dentro de RStudio puedes seguir usando el bot√≥n de *Render* (antes *knit*, pero ahora llamado *Render* por consistencia)

2.  En el shell mediante quarto render: ü§ì

`quarto render archivo.qmd` (por defecto a HTML)

`quarto render archivo.qmd --to pdf`

`quarto render archivo.qmd --to docx`

`quarto --help`

üí°Sobre la importancia del YAML: las especificaciones del YAML se puede incluir tambi√©n en el shell, pero si las hemos incluido en el YAML no tendremos que escribirlas cada vez.

`quarto render archivo.qmd --to html`

`quarto render archivo.qmd --to html -M code-fold:true`

3.  En la consola de R mediante el paquete `quarto`

`library(quarto)`

`quarto_render("archivo.qmd")`

`quarto_render("archivo.qmd", output_format = "pdf")`

### ¬øQu√© hago con mi `.Rmd` o `.ipynb` existentes?

¬°No pasa nada! La mayor√≠a de los `.Rmd` o `.ipynb` existentes se pueden convertir `as-is` a trav√©s de Quarto. Para hacerlo a trav√©s de la l√≠nea de comandos de la terminal se escribe:

`quarto render archivo.Rmd --to html`

Adem√°s existen distintas opciones para convertir archivos `.Rmd` a `.qmd`:

1.  Cambiar `.Rmd` a `.qmd` (esto siempre usar√° Quarto para la renderizaci√≥n)

2.  Cambiar la salida YAML: `html_document` a `format: html`

3.  `knitr::convert_chunk_header("archivo.Rmd", "archivo.qmd")`

No tienes que convertir la sintaxis de todos tus documentos antiguos. Quarto es compatible con versiones anteriores de R Markdown.

#### Ejercicio

Convierte todos los archivos del ejercicio 2.1.1 a `.qmd` y renderizalo a HTML y word mediante la opci√≥n de renderizaci√≥n que m√°s te guste.

üí°Para crear PDFs necesitar√°s instalar una distribuci√≥n reciente de TeX. Recomendamos el uso de {TinyTeX}, que se puede instalar con el siguiente comando en la terminal:

`quarto install tinytex`

## Generando el documento final

### Formato

T√≠tulos coloreados en azul, el texto no est√° con un espaciado doble, no hay n√∫meros de l√≠nea y... ¬°manuscrito rechazado! ¬°PERO NO VAMOS A EDITAR NADA EN WORD! Podemos asegurarnos de que el `.docx` creado tenga siempre el formato deseado utilizando una plantilla `.docx`. Para utilizarla, la plantilla debe colocarse en la misma carpeta que el archivo `.qmd` y debemos hacer un peque√±o ajuste en el YAML.

1.  Primero generamos la plantilla:

    `quarto pandoc -o plantilla.docx --print-default-data-file reference.docx`

2.  Modificamos la plantilla generada como la queramos

3.  Lo a√±adimos al YAML

```{r plantilla}
#| eval: false
format: 
  docx: 
    reference-doc: plantilla.docx
```

### Referencias

Para introducir citas y referencias en nuestro texto en Quarto utilizaremos BibTeX y as√≠ evitaremos tener que hacerlo manualmente. Con BibTex, en lugar de escribir la cita se escribe una "clave" √∫nica (clave de citaci√≥n: @cita) cada vez que se cita una referencia. Esto permite a los autores cambiar los estilos de las referencias sin tener que reformatear nada manualmente (por ejemplo, si hay que enviar un manuscrito a una revista diferente para su publicaci√≥n).

üí° Recomendamos utilizar [Zotero](https://www.zotero.org/) como gestor bibliogr√°fico porque est√° incluido en RStudio, lo que facilita la inclusi√≥n de citas y referencias, pero se puede utilizar cualquier otro gestor.

-   Si queremos a√±adir las referencias en alg√∫n lugar concreto del archivo (ver c√≥digo fuente)

::: {#refs}
:::

#### Ejercicio

Genera una plantilla y modifica los colores, tama√±o de los t√≠tulos, etc. Despu√©s, a√±adelo al YAML. A√±ade alguna referencia en el documento y renderizalo. Por √∫ltimo, sube este documento al repositorio de GitHub.

## Automatizar varias versiones con par√°metros

Tambi√©n podemos a√±adir par√°metros a un documento, que son como variables definidas externamente durante la renderizaci√≥n. Esto permite utilizar un documento como plantilla y crear el mismo documento para diferentes par√°metros. Por ejemplo, si se necesita ejecutar un documento para cada x especies, la especie podr√≠a ser definida como un par√°metro en el YAML del documento.

Por ahora hemos establecido un par√°metro llamado `species` con un valor por defecto de *Fagus sylvatica* (ver YAML). De esta forma, se puede acceder al valor del par√°metro `species` mediante c√≥digo de R con `params$species`

En este documento nos centramos en `r params$species`

Para crear m√∫ltiples documentos utilizando el mismo documento Quarto pero con diferentes valores para el par√°metro, se puede crear una funci√≥n para renderizar nuestro documento y luego utilizar la funci√≥n `walk()` para iterar la funci√≥n sobre varios elementos.

```{r walk_parametros}
#| eval: false

render_mi_doc <- function(species_arg) {
  quarto::quarto_render(
    input = "EHU_2024/dia_4_comunicacion.qmd",
    execute_params = list(species = species_arg),
    output_file = paste0("documento_", species_arg, ".docx"),
    output_format = "docx"
  )
}

purrr::walk(as.vector(c("Fagus sylvatica", "Quercus ilex")), render_mi_doc)

```

#### Ejercicio

Modifica el c√≥digo del chunk anterior y el YAML para que el documento renderizado en vez de nombres de especies nos de tu nombre y el nombre de uno de tus compa√±eros.

üí° [Aqu√≠](https://github.com/Julenasti/tree_species_density/blob/main/02_analyses/01_species_modelling/input_sp_modelling.Rmd) ten√©is un ejemplo real un poco m√°s avanzado.

## Enlaces de inter√©s

-   [Quarto](https://quarto.org)

-   [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)

-   [Quarto workshop](https://www.youtube.com/watch?v=yvi5uXQMvu4)

-   [What is Quarto? RStudio rolls out next-generation R Markdown](https://www.infoworld.com/article/3666743/what-is-quarto-rstudio-quietly-rolls-out-next-generation-r-markdown.html)

-   [How to create Word docs from R or Python with Quarto](https://www.infoworld.com/article/3671668/how-to-create-word-docs-from-r-or-python-with-quarto.html)

-   [Install TinyTeX to create PDF reports](https://yihui.org/tinytex/)

## Trabajo colaborativo

Aunque Git y GitHub facilitan el control de versiones de nuestros proyectos individuales, su m√°xima potencialidad se despliega al trabajar en equipo ya que facilitan el seguimiento del trabajo de todos los colaboradores y la integraci√≥n ordenada de cada parte en un producto final.

Para dar acceso de edici√≥n a tus colaboradores, en la p√°gina principal de nuestro proyecto en GitHub entramos en "*Settings -\> Access -\> Collaborators -\> Manage Access -\> Add people*". Los colaboradores pueden crear su copia local del proyecto de control de versiones clonando el repositorio remoto.

#### Ejercicio

En equipos de 2 o 3 personas:

1.  El due√±o del repositorio invita al resto de integrantes del equipo a su proyecto
2.  Los colaboradores clonan el repositorio al que han sido invitados a su directorio de trabajo

### Ramificaci√≥n

Git permite crear una "rama" (*branch*) paralela al proyecto si se desea seguir una l√≠nea independiente de trabajo, bien por ser diferente de la principal (p. ej. probar un nuevo an√°lisis) o bien para desarrollar espec√≠ficamente una parte del proyecto (p. ej. trabajar s√≥lo en la escritura de los m√©todos de un art√≠culo mientras otros colaboradores trabajan en otras secciones). Las ramas permiten trabajar en el proyecto sin interferir con lo que est√°n haciendo los compa√±eros. En Git, una rama es un *commit* al que le se le da un nombre y que contiene un "enlace" (puntero o *pointer*) a un SHA espec√≠fico que es el origen de la rama. La rama *main* es la rama por defecto cuando se crea un repositorio y a partir de ella se suelen crear las dem√°s.

Las ramas se pueden generar en la [terminal](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia2_colaboracion.md) y en la pesta√±a Git de RStudio. En la pesta√±a Git se generan mediante el bot√≥n "*New Branch*". Al lado de "*New Branch"* podemos observar todas las ramas que contiene el repositorio y nos permite cambiar de rama f√°cilmente clickando en ellas.

![Proceso de creaci√≥n de la rama PPP y la rama monchi](images/ramas.png){fig-align="center"}

#### Ejercicio

1.  Un integrante del equipo crea una rama en el proyecto en el que colabora

2.  Modifica la primera frase del archivo README.txt y sube los cambios al repositorio remoto

3.  Vuelve a la rama main y comprueba el archivo README.txt

![](images/github_code.png){fig-align="center" width="543"}

### ¬øC√≥mo se unen distintas ramas?

Cuando el trabajo desarrollado en una rama se da por finalizado hay que hacer la uni√≥n a la rama principal ("*main*"). Esto se puede hacer en la [terminal](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia2_colaboracion.md) y con el bot√≥n "*pull request*" en la p√°gina del proyecto en GitHub siguiendo los pasos que se explican a continuaci√≥n.

![Proceso de creaci√≥n y uni√≥n de ramas. Ejemplo de uni√≥n (merge) de la rama monchi a la rama main](images/merge.jpg)

Una vez que hemos realizado los cambios que quer√≠amos en la rama y est√°n subidos a GitHub (`git add` + `git commit` + `git push`), en GitHub aparece la opci√≥n de "Compare & pull request". Aqu√≠ se genera el *pull request* ("*Create pull request*") a√±adiendo un mensaje para saber lo que se est√° uniendo. GitHub os indicar√° si existen conflictos o no. Si no existen conflictos, podr√©is realizar el *pull request* sin problema y, si existen conflictos, hay que resolverlos manualmente.

![](images/pullrequest1.jpg){fig-align="center"}

![](images/pullrequest1.1.jpg)

![Caracter√≠sticas del merge a realizar](images/pullrequest2.jpg){fig-align="center"}

![](images/pullrequest3.jpg){fig-align="center"}

![Confirmacion y fin del proceso](images/pullrequest3.1.jpg){fig-align="center"}

### Resoluci√≥n de conflictos

Git puede encontrar conflictos al fusionar ramas que hay que arreglar manualmente (GitHub os indicar√° "Can't automatically merge"). Esto ocurrir√° si en las dos ramas se han cambiado las mismas l√≠neas de un archivo. Hay que generar el pull request y "*Resolve conflicts*".

![Aparici√≥n de conflictos](images/cant_merge.png)

![Resoluci√≥n de conflictos](images/cant_merge2.png)

Git muestra d√≥nde est√°n los conflictos as√≠:

`<<<<<<c√≥digo del main=======c√≥digo de la rama a unir>>>>>>`

![](images/cant_merge3.png)

Para solucionarlo hay que escoger los cambios de la rama principal o de la rama a unir seg√∫n corresponda. Una vez solucionados, Git permite completar el *merge* (es decir, un nuevo *commit* que contendr√° las ramas fusionadas). La mejor manera de evitar conflictos o por lo menos reducir su dificultad es realizar cambios peque√±os y sincronizar frecuentemente con GitHub, y tener una comunicaci√≥n fluida con los colaboradores.

#### Ejercicio

1.  Un integrante del equipo modifica tambi√©n la primera frase del archivo README.txt en la rama main y sube los cambios al repositorio remoto. Esta frase hab√≠a sido previamente modificada en una rama en el ejercicio anterior.
2.  Un integrante del equipo combina la rama del ejercicio anterior con la rama principal (*main*) del proyecto.
3.  Resolved el conflicto (es decir, quedaos con los cambios que sirvan y subid los cambios al repositorio remoto).

üí°[Aqu√≠](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia3_comandos.md) (en la secci√≥n de "Otros comandos √∫tiles") pod√©is ver c√≥mo borrar ramas y otros comandos √∫tiles

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
