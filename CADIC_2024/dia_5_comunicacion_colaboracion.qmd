---
title: | 
  | Comunicación de resultados y trabajo colaborativo
subtitle: "Curso: Programación y análisis estadístico en R. CADIC, Ushuaia, Argentina"
author: 
  - name: Verónica Cruz-Alonso 
    role: Profesora y autora del material
  - name: Julen Astigarraga
    role: Autor del material
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-depth: 4
toc-title: "Índice"
format:
  html:
    link-external-newwindow: true
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

## Objetivos del día 5

-   Aprender las bases de la programación literaria en R

-   Aprender los fundamentos básicos de Quarto y sus diferencias con R Markdown

-   Generar documentos reproducibles en R

-   Aprender a trabajar de forma colaborativa y reproducible con R, RStudio, Git, GitHub y Quarto

## Introducctión a R Markdown y Quarto

R Markdown (<https://rmarkdown.rstudio.com/>) empezó en 2012 con el objetivo de facilitar la reproducibilidad en R. Ha sido desarrollado principalmente por [Yihui Xie](https://yihui.org/). R Markdown es un formato de archivo para crear documentos dinámicos con R que se apoya en [`knitr`](https://yihui.org/knitr/) (paquete para generación de informes dinámicos en R) y [Pandoc](https://pandoc.org/) (conversor de documentos).

R Markdown utiliza **programación literaria**, un paradigma de programación creado por Donald E. Knuth que consiste en escribir en un lenguaje humano (p. ej. inglés, castellano) con fragmentos de código e instrucciones. R Markdown está escrito en Markdown y contiene partes de código de R (o algún otro lenguaje de programación) integrado.

Quarto (<https://quarto.org/>) es un sistema de publicación científica y técnica de código abierto construido sobre Pandoc. Convierte los formatos de texto plano o los formatos mixtos (p. ej. `.qmd`, `.Rmd`, `.md`, `.ipynb`) en informes estáticos PDF, word, HTML, etc. Puede entrelazar texto narrativo y código para producir resultados con un formato elegante en forma de documentos, páginas web, entradas de blog, libros, etc.

La extensión de Quarto es `.qmd` y utiliza filtros Lua que es el lenguaje de extensión de Pandoc (<https://quarto.org/docs/extensions/lua.html>). Para ello, Quarto utiliza un *engine* como `knitr` para ejecutar el código y generar una salida temporal `.md`. El archivo `.md` se procesa mediante Pandoc y los filtros Lua de Quarto + Bootstrap CSS para HTML o LaTeX para PDF.

![Figura de jthomasmock.github.io/quarto-2hr-webinar](images/qmd-universe.png)

La diferencia principal de Quarto respecto a R Markdown es que Quarto se ha generado para la colaboración de más de una comunidad (es decir, no solo usuarios de R o Python) y utiliza una sintaxis y formato compartido entre distintos lenguajes. Además, a medida que se añadían más capacidades a R Markdown a través de paquetes externos de R, la sintaxis para las tareas básicas se volvía incoherente.

![Diagrama de funcionamiento de R Markdown. Figura de jthomasmock.github.io/quarto-2hr-webinar](images/knitr-diagram-rmd.png)

![Diagrama de funcionamiento de Quarto. Figura de jthomasmock.github.io/quarto-2hr-webinar](images/knitr-diagram-qmd.png)

![Diagramas de funcionamiento de Quarto. Figura de jthomasmock.github.io/quarto-2hr-webinar](images/knitr-diagram-qmd-jupyter.png)

Sea cual sea el sistema, Quarto y R Markdown aumentan de la eficiencia de trabajo (a medio-largo plazo), permiten centrarse en el texto sin perder tiempo en el diseño y permiten la producción de documentos de alta calidad.

## Fundamentos básicos de Quarto

Para crear un archivo R Markdown: *File -\> New File -\> Quarto document*. Debemos cambiar el modelo mental: ahora tendremos un documento fuente de texto plano y a partir de dicho documento generamos un documento renderizado. Estos archivos tienen tres componentes principales: (i) metadatos, (ii) texto, (iii) código.

-   Metadatos: se escriben entre `` `---` `` al comienzo del archivo. Utiliza la sintaxis de [YAML](https://en.wikipedia.org/wiki/YAML) (Yet Another Markup Language). Se utiliza para evitar teclear manualmente todas las opciones que pueden afectar al código, al contenido y al proceso de renderizado cada vez que renderizamos el archivo. ¡La sangría es importante!

-   Texto: sintaxis Markdown. Markdown es un formato de texto plano que está diseñado para ser fácil de escribir y, aún más importante, fácil de leer.

-   Código (dos tipos):

    -   Code chunk (bloque de código): se escribe ```` ```{r} codigo aqui``` ````; entre corchetes se indica el lenguaje. Se puede escribir manualmente, utilizar el atajo `Ctrl + Alt + I` (OS X: `Cmd + Option + I`), utilizar el comando `Insert -> Executable Cell` en la barra de herramientas del editor.

    -   Inline (en línea): se escribe `r "código aquí"`.

Para compilar un archivo, se ejecuta el botón de `Render` en RStudio (atajo: `Ctrl + Shift + K`; OS X `Cmd + Shift + K`), que llama a Quarto render en un trabajo de fondo. Esto evita que el renderizado abarrote la consola de R y así es fácil de detener.

💡Con el editor visual de RStudio puedes ver en tiempo real cómo es la conversión a word, HTML, etc.

💡Opciones de ejecución de los chunk: <https://bookdown.org/yihui/rmarkdown/r-code.html>

Son compatibles con muchos lenguajes de programación:

<!--# Que es esto de reticulate -->

```{r reticulate, echo = FALSE, eval = TRUE, warning = FALSE}

library(knitr)

names(knitr::knit_engines$get())

library(reticulate) # for python

```

```{python}

x = "R mola!"

print(x.split(" "))

```

```{r example}

library(ggplot2)
names(cars)

ggplot(cars, aes(speed, dist)) +
  geom_point() +
  geom_smooth()

```

Para buscar ayuda sobre como escribir el texto plano: *Help -\> Markdown Quick Reference* (italics, bold, headers, lists, links, images, R codes, tables, page break, superscripts...)

Referencias: [@blischak2016]

Formato: **negrita**, *cursiva*, subíndice~1~, superíndice^2^, `código`, [hipervínculo](https://bookdown.org/yihui/rmarkdown/markdown-syntax.html), notas al pie[^1]

[^1]: hello world

Títulos: \# primer nivel; \## segundo nivel...

Listas y sublistas: \*, -, +

Citas:

> "R Markdown es maravilloso pero ojo con Quarto"
>
> --- Julen Astigarraga

Fórmulas:

$f(os) = {esta \choose gustando} esto^{?} (1-p)^{n-k}$

Comentarios:

<!--# esto es un comentario (atajo: Ctrl + Shift + C; OS X Cmd + Shift + C)-->

Tablas:

| Col1 | Col2 | Col3 |
|------|------|------|
|      |      |      |
|      |      |      |
|      |      |      |

: Esto es el pie de tabla

Figuras:

![Esto es el pie de figura](images/rmarkdown.png){width="30%"}

Videos:

::: {#fig-repro}
<iframe width="560" height="315" src="https://www.youtube.com/embed/s3JldKoA0zw">

</iframe>
:::

#### Ejercicio

Genera un documento Quarto que esté compuesto por al menos metadatos, código y texto. También puedes añadir otros elementos, como tablas.

### Diferencias de Quarto respecto a R Markdown

Algunas diferencias entre Quarto y R Markdown en cuanto al código (chunks):

-   Estructura de las opciones tipo `key: value`. Las [opciones de los chunks](#0) son similares a las de R Markdown.

-   `#|` sintaxis *(hash pipe)*. Esta es la sintaxis preferida de Quarto, aunque es compatible con la sintaxis anterior de R Markdown. El *hash pipe* le añade más consistencia entre los *engine* (Jupyter, knitr) y nos da más control sobre el orden o espacio de las opciones del chunk (no está limitado a una línea de opciones). No hay ningún atajo para un *hash pipe* pero si escribes uno los siguientes se añadirán automáticamente cuando le das a enter.

-   Tabulación enriquecida: inicias una palabra y tabulas para completar o `Ctrl + espacio` para ver todas las opciones disponibles.

```{r tabulacion}
#| eval: false
2 * 2
```

-   Baterias incluidas: Quarto viene preinstalado con las últimas versiones de RStudio. No se tiene que instalar diferentes paquetes para crear diferentes formatos de salida: <https://quarto.org/docs/output-formats/all-formats.html>

-   Sintaxis compartida (elige tu propio editor y lenguaje preferido)

-   Mejores características y más mejoras en el futuro (R Markdown todavía se mantiene, pero la mayoría de las nuevas características serán incorporadas en Quarto)

### ¿Qué hago con mi `.Rmd` o `.ipynb` existentes?

¡No pasa nada! La mayoría de los `.Rmd` o `.ipynb` existentes se pueden convertir `as-is` a través de Quarto. Para hacerlo a través de la línea de comandos de la terminal se escribe:

`quarto render archivo.Rmd --to html`

Además existen distintas opciones para convertir archivos `.Rmd` a `.qmd`:

1.  Cambiar `.Rmd` a `.qmd` (esto siempre usará Quarto para la renderización)

2.  Cambiar la salida YAML: `html_document` a `format: html`

3.  `knitr::convert_chunk_header("archivo.Rmd", "archivo.qmd")`

No tienes que convertir la sintaxis de todos tus documentos antiguos. Quarto es compatible con versiones anteriores de R Markdown.

### Renderización

Existen tres formas para renderizar un documento en Quarto:

1.  Dentro de RStudio puedes seguir usando el botón de *Render*

2.  En el shell mediante quarto render: 🤓

`quarto render archivo.qmd` (por defecto a HTML)

`quarto render archivo.qmd --to pdf`

`quarto render archivo.qmd --to docx`

`quarto --help`

💡Sobre la importancia del YAML: las especificaciones del YAML se puede incluir también en el shell, pero si las hemos incluido en el YAML no tendremos que escribirlas cada vez.

`quarto render archivo.qmd --to html`

`quarto render archivo.qmd --to html -M code-fold:true`

3.  En la consola de R mediante el paquete `quarto`

`library(quarto)`

`quarto_render("archivo.qmd")`

`quarto_render("archivo.qmd", output_format = "pdf")`

## Generando el documento final

### Formato

Títulos coloreados en azul, el texto no está con un espaciado doble, no hay números de línea y... ¡manuscrito rechazado! ¡PERO NO VAMOS A EDITAR NADA EN WORD! Podemos asegurarnos de que el `.docx` creado tenga siempre el formato deseado utilizando una plantilla `.docx`. Para utilizarla, la plantilla debe colocarse en la misma carpeta que el archivo `.qmd` y debemos hacer un pequeño ajuste en el YAML.

1.  Primero generamos la plantilla en el terminal:

    `quarto pandoc -o plantilla.docx --print-default-data-file reference.docx`

2.  Modificamos la plantilla generada como la queramos utilizando los estilos de Word.

3.  Lo añadimos al YAML

```{r plantilla}
#| eval: false
format: 
  docx: 
    reference-doc: plantilla.docx
```

### Referencias

Para introducir citas y referencias en nuestro texto en Quarto utilizaremos BibTeX y así evitaremos tener que hacerlo manualmente. Con BibTex, en lugar de escribir la cita se escribe una "clave" única (clave de citación: @cita) cada vez que se cita una referencia. Esto permite a los autores cambiar los estilos de las referencias sin tener que reformatear nada manualmente (por ejemplo, si hay que enviar un manuscrito a una revista diferente para su publicación).

💡 Recomendamos utilizar [Zotero](https://www.zotero.org/) como gestor bibliográfico porque está incluido en RStudio, lo que facilita la inclusión de citas y referencias, pero se puede utilizar cualquier otro gestor.

-   Si queremos añadir las referencias en algún lugar concreto del archivo (ver código fuente)

::: {#refs}
:::

#### Ejercicio

Genera una plantilla y modifica los colores, tamaño de los títulos, etc. Después, añadelo al YAML. Añade alguna referencia en el documento y renderizalo. Por último, sube el .qmd y la plantilla al repositorio sincronizado con Git y GitHub.

## Enlaces de interés sobre Quarto y R Markdown

-   [Quarto](https://quarto.org)

-   [R Markdown: The Definitive Guide](https://bookdown.org/yihui/rmarkdown/)

-   [Quarto workshop](https://www.youtube.com/watch?v=yvi5uXQMvu4)

-   [What is Quarto? RStudio rolls out next-generation R Markdown](https://www.infoworld.com/article/3666743/what-is-quarto-rstudio-quietly-rolls-out-next-generation-r-markdown.html)

-   [How to create Word docs from R or Python with Quarto](https://www.infoworld.com/article/3671668/how-to-create-word-docs-from-r-or-python-with-quarto.html)

## Trabajo colaborativo

Aunque Git y GitHub facilitan el control de versiones de nuestros proyectos individuales, su máxima potencialidad se despliega al trabajar en equipo ya que facilitan el seguimiento del trabajo de todos los colaboradores y la integración ordenada de cada parte en un producto final.

Para dar acceso de edición a tus colaboradores, en la página principal de nuestro proyecto en GitHub entramos en "*Settings -\> Access -\> Collaborators -\> Manage Access -\> Add people*". Los colaboradores pueden crear su copia local del proyecto de control de versiones clonando el repositorio remoto.

#### Ejercicio

En equipos de 2 o 3 personas:

1.  El dueño del repositorio invita al resto de integrantes del equipo a su proyecto
2.  Los colaboradores clonan el repositorio al que han sido invitados a una subcarpeta de curso_R

### Ramificación

Git permite crear una "rama" (*branch*) paralela al proyecto si se desea seguir una línea independiente de trabajo, bien por ser diferente de la principal (p. ej. probar un nuevo análisis) o bien para desarrollar específicamente una parte del proyecto (p. ej. trabajar sólo en la escritura de los métodos de un artículo mientras otros colaboradores trabajan en otras secciones). Las ramas permiten trabajar en el proyecto sin interferir con lo que están haciendo los compañeros. En Git, una rama es un *commit* al que le se le da un nombre y que contiene un "enlace" (puntero o *pointer*) a un SHA específico que es el origen de la rama. La rama *main* es la rama por defecto cuando se crea un repositorio y a partir de ella se suelen crear las demás.

Las ramas se pueden generar en la [terminal](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia2_colaboracion.md) y en la pestaña Git de RStudio. En la pestaña Git se generan mediante el botón "*New Branch*". Al lado de "*New Branch"* podemos observar todas las ramas que contiene el repositorio y nos permite cambiar de rama fácilmente clickando en ellas.

![Proceso de creación de la rama PPP y la rama monchi](images/ramas.png){fig-align="center"}

#### Ejercicio

1.  Un integrante del equipo crea una rama en el proyecto en el que colabora

2.  Modifica la primera frase del archivo .qmd y sube los cambios al repositorio remoto

3.  Vuelve a la rama main y comprueba el archivo .qmd

![](images/github_code.png){fig-align="center" width="543"}

### ¿Cómo se unen distintas ramas?

Cuando el trabajo desarrollado en una rama se da por finalizado hay que hacer la unión a la rama principal ("*main*").

![Proceso de creación y unión de ramas. Ejemplo de unión (merge) de la rama monchi a la rama main](images/merge.jpg)

Esto se puede hacer en la [terminal](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia2_colaboracion.md) y con el botón "*pull request*" en la página del proyecto en GitHub siguiendo los pasos que se explican a continuación. Una vez que hemos realizado los cambios que queríamos en la rama y están subidos a GitHub (`git add` + `git commit` + `git push`), en GitHub aparece la opción de "Compare & pull request". Aquí se genera el *pull request* ("*Create pull request*") añadiendo un mensaje para saber lo que se está uniendo. GitHub os indicará si existen conflictos o no. Si no existen conflictos, podréis realizar el *pull request* sin problema y, si existen conflictos, hay que resolverlos manualmente.

![](images/pullrequest1.jpg){fig-align="center"}

![](images/pullrequest1.1.jpg)

![Características del merge a realizar](images/pullrequest2.jpg){fig-align="center"}

![](images/pullrequest3.jpg){fig-align="center"}

![Confirmacion y fin del proceso](images/pullrequest3.1.jpg){fig-align="center"}

### Resolución de conflictos

Git puede encontrar conflictos al fusionar ramas que hay que arreglar manualmente (GitHub os indicará "Can't automatically merge"). Esto ocurrirá si en las dos ramas se han cambiado las mismas líneas de un archivo. Hay que generar el pull request y "*Resolve conflicts*".

![Aparición de conflictos](images/cant_merge.png)

![Resolución de conflictos](images/cant_merge2.png)

Git muestra dónde están los conflictos así:

`<<<<<<código del main=======código de la rama a unir>>>>>>`

![](images/cant_merge3.png)

Para solucionarlo hay que escoger los cambios de la rama *main* o de la rama a unir según corresponda. Una vez solucionados, Git permite completar el *merge* (es decir, un nuevo *commit* que contendrá las ramas fusionadas). La mejor manera de evitar conflictos o por lo menos reducir su dificultad es realizar cambios pequeños y sincronizar frecuentemente con GitHub, y tener una comunicación fluida con los colaboradores.

#### Ejercicio

<!--# Aquí no habría que hacer una rama para que te cree un pull request en GitHub?-->

1.  Otro integrante del equipo modifica también la primera frase del archivo .qmd en la rama main y sube los cambios al repositorio remoto. Esta frase había sido previamente modificada en una rama en el ejercicio anterior.
2.  La misma persona combina la rama del ejercicio anterior con la rama principal (*main*) del proyecto.
3.  Resolved el conflicto (es decir, quedaos con los cambios que sirvan y subid los cambios al repositorio remoto).
4.  ¿Podrías aplicar esto a la escritura de un artículo científico?

💡[Aquí](https://github.com/DatSciR/intro_git-github/blob/main/centra/dia3_comandos.md) (en la sección de "Otros comandos útiles") podéis ver cómo borrar ramas y otros comandos útiles

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
