---
title: | 
  | Ciencia de datos en R ![](images/Escuela de Doctorado_trilingue_positivo.png){width=80%,fig-align="right"}
subtitle: "Visualización: contando historias"
author: Verónica Cruz-Alonso and Julen Astigarraga
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-depth: 4
toc-title: "Índice"
format:
  html: 
    link-external-newwindow: true
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

## Objetivos del día 2

<!--# ja: añadiria los objetivos de este día aquí -->

![Modelo de ciencia de datos de Hadley Wickham, Mine Çetinkaya-Rundel y Garrett Grolemund. Traducido de https://r4ds.hadley.nz/intro#fig-ds-diagram](images/datascience.png){#fig-datascience alt="Modelo de ciencia de datos de Hadley Wickham, Mine Çetinkaya-Rundel y Garrett Grolemund. Traducido de https://r4ds.hadley.nz/intro#fig-ds-diagram"}

## Introducción

La visualización de datos es una disciplina cuyo fin es mapear datos de forma gráfica para comunicar un mensaje. En investigación se usa principalmente en los análisis exploratorios (durante la fase de entendimiento de los datos) y en la comunicación de los resultados.

La representación gráfica de nuestras ideas o resultados de investigación es esencial para comunicar de forma efectiva nuestra interpretación de los datos y es clave si queremos causar cierto impacto en el interlocutor. El hombre de Vitruvio de Leonardo Da Vinci, el árbol de la vida de Charles Darwin o la primera foto de la doble hélice del ADN de Rosalind Franklin son visualizaciones de conceptos que han cambiado profundamente nuestro entendimiento del mundo. Algunos estudios sugieren que el tiempo medio que el usuario emplea en ojear una página web es de unos segundos, pero si hay algo que consigue atraer su atención entonces el tiempo se incrementa exponencialmente. Este atractor en el mundo científico puede ser un buen gráfico de resultados o un buen resumen gráfico.

![](images/buen-grafico.png){width="469"}

En este bloque vamos a aprender como representar de manera efectiva muestros datos utilizando el paquete {ggplot2} de *tidyverse*. {ggplot2} permite hacer gráficos razonablemente claros y estéticamente bonitos con poco tiempo y un esfuerzo pequeño. Es extremadamente flexible y potente por lo que ha alcanzado gran popularidad.

{ggplot2} está escrito en R siguiendo la [gramática de gráficos (gg)](https://www.amazon.com/Grammar-Graphics-Statistics-Computing/dp/0387245448/ref=as_li_ss_tl). Por ello, al utilizarlo, el usuario tiene que pensar como cuando está haciendo un dibujo a mano y pensar en ir añadiendo diferentes capas a la creación. El flujo de trabajo es crear un gráfico vacío, añadir una capa con los datos, añadir una capa con las etiquetas, etc.

![https://www.donnacowan.ca/category/animated-gifs/](images/Buckley-Bay-Oil-Painting-Animation-6x8-2.gif){width="441"}

Otra característica de {ggplot2} además del trabajo por capas es que precisa de datos ordenados para que se ejecute de forma óptima.

💡Recordamos que en una tabla de datos ordenados (*Tidy Data*) cada columna representa una variable, cada fila es una observación y cada celda contiene un único valor.

## Elementos básicos en un gráfico de {[ggplot2](https://ggplot2.tidyverse.org/)}

Se necesitan tres capas básicas para crear un gráfico con {ggplot2}:

-   Los datos (*data*).

-   Las geometrías (*geom*): definen el tipo de gráfico (de puntos, de barras, etc.).

-   Los *aesthetics*: características visuales de las geometrías (p. ej. la posición, el color) definidas por las variables de nuestros datos.

Las capas se conectan entre sí con el símbolo `+`, que siempre debe ir colocado al final de la línea de código si queremos seguir añadiendo capas al gráfico. Todas las capas que se pueden incluir están recogidas en la [guía de {ggplot2} de Posit](https://diegokoz.github.io/intro_ds/fuentes/ggplot2-cheatsheet-2.1-Spanish.pdf).

💡 Se utiliza el símbolo `+` porque {ggplot2} es anterior al *pipe* (`|>`) y cambiar `+` por el *pipe* requeríría muchos reajustes en un montón de paquetes.

```{r capas_basicas}

library(tidyverse)

# install.packages(c("titanic", "ggThemeAssist", "patchwork", "dplyr", "terra", "ggmap", "plotly", "easyclimate"))

#Cargamos los datos
titanic <- titanic::titanic_train 

head(titanic)
# PassengerId: Id del pasajero
# Survived: 1-si, 0-no
# Pclass: clase del pasajero
# Name: nombre Name
# Sex: sexo
# Age: edad
# SibSp: numero de hermanos + parejas a bordo
# Parch: numero de progenitores + hijos a bordo
# Ticket: numero de billete
# Fare: tarifa
# Cabin: camarote
# Embarked: puerta de embarque

library(ggplot2)

ggplot(data = titanic)

ggplot(data = titanic, aes(x = Age, y = Fare)) 

ggplot() + 
  geom_point(data = titanic, aes(x = Age, y = Fare)) #Los datos se pueden colocar dentro de la funcion ggplot si se van a usar los mismos en todas las geometrias

ggplot() + 
  geom_jitter(data = titanic, aes(x = Pclass, y = Fare))

# Como guardar plots satisfactorios

plotqmegusta <- ggplot() + 
  geom_point(data = titanic, aes(x = Age, y = Fare))

ggsave(filename = "farebyage.jpg", plot = plotqmegusta, width = 12, height = 9, units = "cm", dpi = 300)

ggsave(filename = "farebyage.pdf", plot = plotqmegusta, width = 12, height = 9, units = "cm")
```

💡Algunas revistas científicas dan especificaciones muy detalladas sobre cómo tienen que ser los gráficos (p. ej. [Science](https://www.science.org/content/page/instructions-preparing-initial-manuscript#preparation-of-figures)). Cuando no tenemos una referencia clara recomendamos pensar en formato A4 (21 x 29,7 cm) y que todos los elementos visuales del gráfico queden visibles cuando se guarda dentro de estos límites de tamaño.

#### Ejercicio

Representa un gráfico para ver la relación entre el sexo de los pasajeros y la clase.

## Aesthetics vs. argumentos

Los aesthetics cambian cada elemento de las geometrías. Los argumentos estéticos cambian toda la geometría en conjunto.

```{r aes_arguments}

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare, color = Sex))

# No es lo mismo que... 

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare), color = "darkred") 
```

En la ayuda de las funciones de {ggplot2} aparece una lista de los *aesthetics* y los argumentos estéticos que acepta esa función. Se pueden incluir tantos *aesthetics* como se deseen.

```{r aes}

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare, size = Pclass, shape = Sex, color = Embarked))

summary(titanic$Pclass)

titanic <- titanic |> mutate(Pclass = factor(Pclass, levels = c(3, 2, 1), labels = c("Tercera", "Segunda", "Primera")))

summary(titanic$Pclass)

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare, size = Pclass, shape = Sex, color = Embarked), alpha = 0.5)
```

#### Ejercicio

¿Cómo modificarías el siguiente código para representar la puerta de embarque con diferentes formas pero los puntos de color rosa?

```{r ejer_2}

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare))

```

## Tipos de gráfico (geoms)

El tipo de gráfico que escojamos va a depender del tipo de variable y del mensaje que queramos transmitir (es decir, del propósito).

![Tipos de variables](images/tipos_variables.png)

Para elegir qué tipo de gráfico nos conviene según el propósito

TBD #ver chuleta de principios para creaci?n de gr?ficos #m?s informaci?n sobre tipos de gr?ficos en Vandemeulebroecke et al. 2019

```{r geoms}

ggplot(data = titanic) + 
  geom_point(aes(x = Age, y = Fare, color = Sex)) + 
  geom_smooth(aes(x = Age, y = Fare, color = Sex, fill = Sex))

```

### Exploración de variables categóricas

#### Conteo

```{r conteo}

summary(titanic$Pclass)

ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass))

```

#### Proporciones

```{r prop}

miplot <- ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass, group = 1)) 

miplot # group = 1 hace que considere toda la variable como un todo

miplot_data <- ggplot_build(miplot) 
head(miplot_data$data)

ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass, y = ..count.., group = 1))

ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass, y = ..prop.., group = 1))
```

### Exploración de variables numéricas

```{r num}

ggplot(data = titanic) + 
  geom_histogram(aes(x = Age))

ggplot(data = titanic) + 
  geom_density(aes(x = Age))

ggplot(data = titanic) + 
  geom_boxplot(aes(y = Age))

ggplot(data = titanic) + 
  geom_jitter(aes(x = 1, y = Age))
```

#### Ejercicio

Describe la distribución de las tarifas pagadas por los pasajeros.

### Relaciones entre variables

#### Variables categóricas

```{r dos_cat}

ggplot(data = titanic) + 
  geom_count(aes(x = Sex, y = Survived))

titanic <- titanic |> 
  mutate(Survived = factor(Survived, levels = c(0, 1), labels = c("Muerto", "Vivo")))

ggplot(data = titanic) + 
  geom_count(aes(x = Sex, y = Survived))

table(titanic$Sex, titanic$Survived)

ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass, fill = Sex))

prueba <- ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass, fill = Sex)) 
prueba2 <- ggplot_build(prueba)
```

#### Ejercicio

Haz un gráfico para averiguar en qué clase sobrevivieron más personas.

#### Variables numéricas

```{r dos_num}

pnum <- ggplot(data = titanic, aes(x = Age, y = Fare)) + 
  geom_point(alpha = 0.5)

pnum

pnum + 
  geom_smooth()
```

#### Variable categórica vs. numérica

```{r cat_num}

ggplot(data = titanic) + 
  geom_boxplot(aes(x = Pclass, y = Age))

ggplot(data = titanic) + 
  geom_violin(aes(x = Pclass, y = Age), draw_quantiles = 0.5) #+ 
# geom_jitter(aes(x = Pclass, y = Age), alpha = 0.3, width = 0.2)

ggplot(data = titanic) + 
  geom_violin(aes(x = Pclass, y = Age, fill = Sex), draw_quantiles = 0.5)

# Haciendo calculos previos

summ_titanic <- titanic |> 
  group_by(Pclass) |> 
  summarise(Avg_age = mean(Age, na.rm = TRUE), Sd_age = sd(Age, na.rm = TRUE))

summ_titanic

ggplot(data = summ_titanic, aes(x = Pclass, y = Avg_age)) + 
  geom_col(color = "black") + 
  geom_errorbar(aes(ymax = Avg_age + Sd_age, ymin = Avg_age - Sd_age), width = 0.25)

ggplot(data = summ_titanic, aes(x = Pclass, y = Avg_age)) + 
  geom_line(aes(group = 1))
```

💡Echar un vistazo al paquete {ggdist} y los raincloud plots

💡{ggpairs}

💡{corrgram}

## {Ggplot2}: funciones avanzadas

#Ver la chuleta

<!--# ja: pon esto tambien como comentario -->

### Etiquetas

```{r etiquetas}

pnumcat <- ggplot(data = titanic) + 
  geom_boxplot(aes(x = Pclass, y = Age))

pnumcat

pnumcat + labs(title = "Edad de los pasajeros según su clase", x = "Clase", y = "Edad (años)") #title, subtitle, x, y, caption
```

### Sistema de coordenadas

```{r coords}

pnumcat +
  coord_cartesian(ylim = c(0, 100))
```

💡Ojo con `xlim`

#### Ejercicio

Cambia la posición de los ejes X e Y en el sistema de coordenadas de pnumcat.

### Faceting

Los *facets* dividen el gráfico en subgráficos basados en el valor de una o varias variables categóricas. Las facetas son muy útiles en exploración de datos.

```{r facet_1}

miplot2 <- ggplot(data = titanic, aes(x = Age, y = Fare, color = Sex)) + 
  geom_point()

miplot2
```

Hay dos funciones para facetar: `facet_grid()` y `facet_wrap()`.

```{r facet_2}

miplot2 + 
  facet_grid(rows = vars(Pclass), scales = "free") 

miplot2 + 
  facet_grid(rows = vars(Pclass), cols = vars(Embarked)) 

miplot2 + 
  facet_wrap(facets = vars(Embarked), ncol=3)
```

### Posición

¿Cómo colocar geometrias que de otro modo ocuparían el mismo espacio?

```{r posicion}

ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass, fill = Sex))

ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass, fill = Sex), position = "dodge") #esquivar

ggplot(data = titanic) + 
  geom_bar(aes(x = Pclass, fill = Sex), position = "fill") #rellenar

```

### Escalas

Sirven para personalizar los *aesthetics*. Las funciones de la familia `scale` siempre tienen la misma estructura: `scale_aesthetic` que se personaliza con \_ tipo de escala (p. ej. continua, discreta, manual, etc.).

```{r escala}

miplot2 +
  scale_color_manual(values = c("darkgreen", "chartreuse")) + 
  scale_y_sqrt(breaks = c(9,16,25), labels = c("a", "b","c")) 

```

#### Ejercicio

¿Qué harías para cambiar la escala de la edad a un degradado de colores de azul a amarillo en el siguiente gráfico?

### Los colores en R

Las paletas de colores tipo *manual* y *gradient* se personalizan con el nombre o código del color. Con [esta herramienta](https://r-charts.com/colors/) puedes elegir entre cientos de colores.

Las paletas tipo *brewer* y *distiller* utilizan paletas de colores que pueden ser secuenciales, cualitativas o divergentes, que aunque tienen utilidad en gran variedad de situaciones, están diseñadas para trabajar [con mapas o a escalas pequeñas](https://colorbrewer2.org/#type=sequential&scheme=BuGn&n=3).

Las paletas HCL (*hue-chroma-luminance*) son paletas muy populares que tienen su propia función (p. ej. colores para representar batimetría). De entre ellas, *Viridis* se he vuelto muy popular porque está diseñada para que personas con distintos tipos de daltonismo puedan distinguir los colores.

```{r paletas}

RColorBrewer::display.brewer.all() 

RColorBrewer::brewer.pal(name = "Set3", n = 6) # para crear paleta

grDevices::hcl.pals() # HCL Palettes 

X11()
example("hcl.colors")

hcl.colors(n = 6, palette = "Lajolla") # para crear paleta

# Viridis 

ggplot(data = titanic, aes(x = Age, y = Fare, color = Age)) + 
  geom_point() + 
  scale_color_gradientn(colours = hcl.colors(12, "viridis"))

ggplot(data = titanic, aes(x = Age, y = Fare, color = Age)) + 
  geom_point() + 
  scale_color_viridis_c()
```

💡[Aquí](https://ggplot2-book.org/scale-colour.html) puedes encontrar más información sobre cómo utilizar colores en {ggplot2}.

### Temas

`theme()` permite la personalización completa de todos los elementos del gráfico. Los argumentos dentro de la función definen la parte del gráfico a cambiar. Se les asigna una función de cambio según el elemento a cambiar dentro de esa parte (parte.del.gráfico = elemento_a_cambiar(...)): *line*, *rect*, *text*.

```{r theme}

?theme

miplot2 + 
  theme(axis.title.x = element_text(color = "red", face = "bold")) 

```

#### Ejercicio

Dibuja una linea negra que represente los ejes de miplot y quita el fondo del gráfico.

Existen temas configurados por defecto y un asistente que te ayuda a personalizar el gráfico.

```{r temas_defecto}

miplot2 + theme_classic() 
miplot2 + theme_light() 
miplot2 + theme_void()

# GgthemeAssist
# install.packages("ggThemeAssist")

miplot2
```

<!--# ja: que quieres hacer aqui abajo? -->

💡Ggplotly library(plotly) ggplotly(miplot2)

## Multipaneles

La librería {patchwork} permite añadir gráficos ([y también tablas](https://www.tidyverse.org/blog/2024/09/patchwork-1-3-0/)) entre sí como si fueran diferentes capas.

```{r patchwork}

# install.packages("patchwork")
library(patchwork)

miplot + miplot2 
miplot / miplot2

miplot / miplot2 + 
  plot_annotation(tag_levels = "a", tag_suffix = ")")

```

En [este enlace](https://patchwork.data-imaginist.com/articles/guides/layout.html) puedes ver cómo personalizar mucho más la disposición de los diferentes gráficos.

## Mapas

La representación de mapas es sencilla con {ggplot2} si conseguimos transformar los datos espaciales en una tabla de datos ordenada.

![Mapas en formato vectorial y en formato raster. https://commons.wikimedia.org/wiki/File:Vectores_vs_rasters.png](https://upload.wikimedia.org/wikipedia/commons/0/02/Vectores_vs_rasters.png?20180402154102)

![](https://jcheshire.com/wp-content/uploads/2012/02/bike_ggplot-800x529.png)

### Raster

<!--# ja: a mi el get_daily_climate() no me funciona. esta bien? -->

```{r raster}

#install.packages(c("terra", "easyclimate))

library(terra)
library(easyclimate)

# Obtenemos datos de temperatura máxima para el 31 de diciembre de 2020 en una zona de España 

raster <- get_daily_climate(
  coords = vect("POLYGON ((-4.5 41, -4.5 40.5, -5 40.5, -5 41))"), 
  period = "2020-12-31", 
  climatic_var = "Tmax", 
  output = "raster")

plot(raster)

tidy_raster <- terra::as.data.frame(raster, xy = TRUE) 
head(tidy_raster)

rastermap <- ggplot(data = tidy_raster) + 
  geom_raster(aes(x = x, y = y, fill = `2020-12-31`), interpolate = TRUE) 

rastermap

rastermap + 
  scale_fill_viridis_c(name = "Temperatura\nmáxima (ºC)\n31 Dic. 2020") +
  labs(y = "Latitude", x = "Longitude") + 
  theme_bw()

```

### Vectorial

En general, se recomienda usar `geom_sf()`. Cuando el mapa contiene puntos es sencillo transformarlo en formato ordenado con `terra::as.data.frame()` y tratarlo con `geom_point()`. Para líneas y polígonos es mas dificil, pero se puede como veremos en el ejemplo debajo.

💡<https://ggplot2.tidyverse.org/reference/ggsf.html>

<!--# ja: creo que el geom() de abajo no hace nada, no? -->

```{r vect}

# install.packages("sf")
library(sf)

vect_terra <- vect(system.file("ex/lux.shp", package = "terra"))
vectorial <- st_as_sf(vect_terra)

vectorial

vecmap <- ggplot(data = vectorial) + 
  geom_sf(aes(fill = NAME_2), color = "white")

vecmap

vecmap + 
  coord_sf() + 
  scale_fill_brewer(palette = "Set3", 
    name = "Cantones de\nLuxemburgo") + 
  labs(y = "Latitude", x = "Longitude") + 
  theme_bw()

vectorial_df <- vect_terra |> 
  geom() |> 
  terra::as.data.frame()

ggplot(data = vectorial_df) + 
  geom_polygon(aes(x = x, y = y, group = geom, fill = as.factor(geom)), color = "white") +
  scale_fill_brewer(palette = "Set3", 
    name = "Cantones de\nLuxemburgo") + 
  labs(y = "Latitude", x = "Longitude") + 
  theme_bw()

```

<!--# ja: quieres añadir algo mas aqui? o si no ponlo como comentario?-->

library ggmap TBD

## Enlaces de interés

-   [Guía de {ggplot2} de Posit](https://diegokoz.github.io/intro_ds/fuentes/ggplot2-cheatsheet-2.1-Spanish.pdf)

-   [Construye un gráfico capa a capa](https://rpubs.com/hadley/ggplot2-layers)

-   [Elegant graphics for data analysis](https://ggplot2-book.org/)

-   [Tutorial de {ggplot2} de Cedric Scherer](https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/)

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
