---
title: | 
  | Ciencia de datos en R ![](images/Escuela de Doctorado_trilingue_positivo.png){width=80%,fig-align="right"}
subtitle: "Organizando datos: el d√≠a a d√≠a"
author: Julen Astigarraga and Ver√≥nica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-title: "√çndice"
format:
  html: default
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

## Presentaci√≥n

En este curso, exploraremos tanto los fundamentos te√≥ricos como las aplicaciones pr√°cticas de la ciencia de datos en R. Abordaremos desde tareas comunes que nos enfrentamos en nuestro d√≠a a d√≠a, como la limpieza y transformaci√≥n de datos, hasta nociones m√°s avanzadas de visualizaci√≥n y programaci√≥n. Adem√°s, aprenderemos a utilizar herramientas para generar documentos reproducibles y colaborativos. Durante el curso, combinaremos la teor√≠a con la pr√°ctica, adaptando las lecciones a los problemas espec√≠ficos de cada asistente, los cuales ir√°n evolucionando d√≠a a d√≠a.

El objetivo principal es garantizar que tanto aquellos con conocimientos b√°sicos en ciencia de datos como aquellos con un nivel m√°s avanzado puedan beneficiarse y llevar consigo nuevos aprendizajes al finalizar el curso.

<!--# ja: quizas se podria modificar un poco la figura dando un color mas clarito a modelizar pq no lo vamos a ver en este curso -->

![Modelo de ciencia de datos de Hadley Wickham, Mine √áetinkaya-Rundel y Garrett Grolemund. Traducido de https://r4ds.hadley.nz/intro#fig-ds-diagram](images/datascience.png){#fig-datascience}

<!--# ja: modificar la estructura del primer dia a√±adiendo lo que vamos a ver en el script de introduccion -->

## Estructura del curso

+-----------------------------------------------------+-------------------------------------+
| Bloques                                             | Contenido                           |
+=====================================================+=====================================+
| Organizar datos: el d√≠a a d√≠a                       | Importar                            |
|                                                     |                                     |
|                                                     | Explorar                            |
|                                                     |                                     |
|                                                     | Limpiar                             |
|                                                     |                                     |
|                                                     | Transformar                         |
|                                                     |                                     |
|                                                     | Manejar                             |
+-----------------------------------------------------+-------------------------------------+
| Visualizaci√≥n: contando historias                   | Fundamentos de visualizaci√≥n        |
|                                                     |                                     |
|                                                     | Bases: gr√°ficos por capas           |
|                                                     |                                     |
|                                                     | Visualizaci√≥n avanzada              |
|                                                     |                                     |
|                                                     | Introducci√≥n a la creaci√≥n de mapas |
+-----------------------------------------------------+-------------------------------------+
| Programaci√≥n: aprendiendo a programar con funciones | Funciones                           |
|                                                     |                                     |
|                                                     | Estilo de c√≥digo                    |
|                                                     |                                     |
|                                                     | Iteraciones                         |
|                                                     |                                     |
|                                                     | Programaci√≥n funcional              |
+-----------------------------------------------------+-------------------------------------+
| Comunicaci√≥n: generando documentos reproducibles    | Introducci√≥n a R Markdown           |
|                                                     |                                     |
|                                                     | Introducci√≥n a Quarto               |
|                                                     |                                     |
|                                                     | R Markdown vs Quarto                |
|                                                     |                                     |
|                                                     | Trabajos reproducibles              |
+-----------------------------------------------------+-------------------------------------+
| Colaboraci√≥n: trabajando en equipo                  | Introducci√≥n a Git                  |
|                                                     |                                     |
|                                                     | Introducci√≥n a GitHub               |
|                                                     |                                     |
|                                                     | Flujo de trabajo en Git y GitHub    |
|                                                     |                                     |
|                                                     | Trabajos colaborativos              |
+-----------------------------------------------------+-------------------------------------+

## Qui√©nes somos

Coordinamos el [grupo de trabajo de Ecoinform√°tica](https://ecoinfaeet.github.io/website/index.html) de la Asociaci√≥n Espa√±ola de Ecolog√≠a Terrestre.

Y vosotros ¬øqui√©nes sois?

## Introducci√≥n a la programaci√≥n en R

![El proceso de aprendizaje en R, por Allison Horst. https://allisonhorst.com/everything-else](images/e684f0da-13b1-4d00-ab25-37814e79ee1e.png){width="362"}

### Objetivos

-   Aprender las bases de la programaci√≥n en R

-   Aprender estilos de c√≥digo que facilitan su comprensi√≥n (üìù)

<!--# ja: sugerencia a valorar (not sure) poner todos los principales objetivos de cada dia. por ahora me ha ayudado a estructurar cada dia. y terminar con algunas refs interesantes que ya las tenemos-->

### Conceptos b√°sicos

-   R: lenguaje de programaci√≥n din√°mico (se interpreta el c√≥digo en el momento que se ejecuta).

-   RStudio: entorno de desarrollo integrado para programar en R. Tiene cuatro zonas diferenciadas: el editor de c√≥digo, la consola (donde se ejecuta el c√≥digo), el navegador del espacio de trabajo (con el entorno ‚Äì*environment-* y el historial de comandos) y el mix de abajo a la derecha (Archivos, Gr√°ficos, Paquetes, Ayuda).

-   Objetos: cualquier elemento almacenado con un nombre espec√≠fico. Pueden ser de muchos tipos: `numeric`, `integer`, `logical`, `data.frame`, `SpatVector`, etc.

-   Funciones: objetos de R que toman un vector de entrada y dan como resultado otro vector haciendo una acci√≥n concreta (funcionalidad espec√≠fica). Son los *bloques de construcci√≥n* fundamentales en cualquier script de R que es un lenguaje funcional.

![](images/function.png)

> Para comprender la computaci√≥n en R, resultan √∫tiles dos lemas:
>
> \- Todo lo que existe es un objeto.
>
> \- Todo lo que sucede es una llamada a funci√≥n.
>
> --- John Chambers ([Advanced R](https://adv-r.hadley.nz/index.html))

-   Paquetes o librerias: contienen funciones reutilizables, documentaci√≥n sobre c√≥mo usarlas y datos de ejemplo. Son las unidades fundamentales de c√≥digo reproducible en R.

-   CRAN: the Comprehensive R Archive Network.

### Comenzando a trabajar en R

El directorio de trabajo...<!--# ja: a√±adir definicion de directorio de trabajo-->

```{r wd}
#| eval: false
getwd() # saber directorio de trabajo 
setwd("C:/Users/veruk/Desktop/Disco/curso_ciencia_datos") # ojo con la ruta / o \\
```

De todas formas, no es recomendable establecer el directorio de trabajo manualmente porque el trabajo deja de ser reproducible. Mejor crear desde el principio un proyecto donde se guarden todos los datos de entrada y resultados del script. Al abrir el proyecto, se sincroniza con pesta√±a Files.

Para crear un proyecto: Archivo `->` Nuevo proyecto

#### Ejercicio 1

Crea un proyecto para el curso de de ciencia de datos

### Instalar paquetes y cargarlos en R

Ejecuto un comando con CTRL + ENTER (CTRL + R)

```{r instalar}
# install.packages("tidyverse", dep = T) # dep = T significa instalar dependencias
library(tidyverse)
```

### Creaci√≥n de objetos en R

```{r crear_obj}
x <- 4.5 # shortcut ALT + "-"
y <- "objeto" # si el objeto no es num√©rico, usar comillas
class(x) # funci√≥n para ver de que clase es nuestro objeto class(y)
x # Llamar al vector para saber su valor
y
```

üìùLos nombre de los objetos deben ser descriptivos y no pueden contener s√≠mbolos especiales (`^`, `!`, `$`, `@`, `+`, `-`, `/`, `*`).

üìùR es sensible a las may√∫sculas. Mejor no usarlas.

### Operaciones aritm√©ticas (R como calculadora)

```{r aritmetica}
5 + 6
5 * 6
60 / 4
5 + 4 - 2
5 + 4 * 5
(5 + 4) * 5
log(10) # logaritmo neperiano 
log10(10) 
exp(1) 
3 ^ 2 
3 ^ 2 / 3 
sqrt(16) 
pi 
sin(pi / 2) # en radianes 
cos(pi / 2)
tan(pi / 2)
asin(1) 
asin(1) * 2
asin(1) * 2 - pi
acos(1)
```

### Tipos de objetos

<!--# ja: a√±adir definicion de cada tipo de objeto o link a una definicion?-->

#### Vectores

```{r vectores}
v1 <- c(2.4, 4, 6, 3.2) # si quiero asignar mas de un valor uso "c" (concatenar) 
v1 
v1 * 100 # puedo operar con los vectores 
log(v1)
v2 <- c(1, 3, 4, 8) # pero tambi√©n entre vectores 
v1 + v2
v3 <- v1 - v2 
v3
mean(x = v2) # funciones ya programadas 
sd(v2) 
length(v2) # n vector 
max(v2) 
min(v2)
# ?mean

# funciones que facilitan la creaci√≥n de vectores
v4 <- rep(x = 1, times = 4) 
v4 
v5 <- 1:10 # dos puntos de a a b 
v5 
v6 <- seq(from = 1, to = 20, by = 2) 
v6
v7 <- c(v5, v6) 
v7
v8 <- c(v5, rep(0, 3), v6)
v8
```

<!--# ja: si el nivel no es muy bajo podemos pasar estos ejercicios. tambien para que nos de tiempo a ver todo lo que queremos ver el primer dia-->

#### Ejercicio 2

-   Elije un n√∫mero y multiplicalo por 3

-   Crea un objeto que contenga 100 valores entre 1900 y 2000

-   Suma un n√∫mero a tu objeto

-   Multiplica tu objeto por s√≠ mismo

-   Crea un √∫nico objeto que contenga el n√∫mero 5 repetido 9 veces junto con una secuencia de 5 a 50 cada 5 elementos

-   ¬øCu√°l es la longitud del objeto anterior?

##### M√°s estrategias para crear vectores

```{r mas_vectores}
rep(x = 1, times = 4) 
rep(1:4, times = 2) 
rep(1:4, each = 2) 
rep(1:4, times = 1:4)
rep(x = c("gato", "perro", "pez"), times = c(5, 3, 1))
rnorm(10, mean = 4, sd = 2.2)
```

#### Matrices

```{r matrices}
mivector <- sample(x = 1:10, size = 1000, replace = T) # sample: funci√≥n para crear numeros aleatorios 
mimatriz <- matrix(mivector, nrow = 100, ncol = 10) # matrix: funci√≥n para convertir vector en matriz. matrix va a rellenar por columnas por defecto
str(mivector) # mostrar estructura datos 
str(mimatriz)
summary(mivector) # resumen de los datos 
summary(mimatriz)
a <- c(1, 2, 3, 4) 
b <- c(1, 2, 3, 4) 
d <- c("hi", "hola", "hola", "hi")
mimatriz_num <- matrix(c(a, b), nrow = 4, ncol = 2) 
mimatriz_num
mimatriz_car <- matrix(c(a, b, d), nrow = 4, ncol = 3) 
mimatriz_car
summary(mimatriz_num) 
summary(mimatriz_car)
```

#### Bases de datos (data frames)

```{r dataframes}
a <- c(1, 2, 3, 4) 
b <- c(1, 2, 3, 4) 
d <- c("hi", "hola", "hola", "hi")
midataframe <- data.frame(mivariable1 = a, mivariable2 = b, mivariable3 = d)
str(midataframe) 
summary(midataframe) 
# View(midataframe)
# un tibble es un data.frame de tidyverse, con caracter√≠sticas mejoradas
mitibble <- tibble(mivariable1 = a, mivariable2 = b, mivariable3 = d)
str(mitibble) 
str(midataframe) 
summary(mitibble) 
summary(midataframe) 
mitibble
midataframe
```

#### Listas

```{r listas}
e <- c(TRUE, TRUE, TRUE, FALSE, FALSE)
milista <- list(a, b, d, e)
milista 
str(milista) 
summary(milista)
milista2 <- list(a, b, d, e, mivector, mimatriz, midataframe)
str(milista2)
```

##### Acceder a elementos dentro de los objetos con R base

```{r acceder}
mivector 
mivector[505]
mimatriz 
mimatriz[20, 9] # [filas, columnas] 
mimatriz[20, ] # selecciono todas las columnas 
mimatriz[, 9] # selecciono todas las filas
midataframe 
midataframe[3, 3] 
midataframe[3, "mivariable3"] 
midataframe[, "mivariable3"] 
midataframe$mivariable3
milista 
milista[[4]] 
milista[[4]][4]
```

#### Ejercicio 3

-   Crea una lista que contenga 2 `data.frames` con 2 variables cada uno (`variable1` y `variable2`) y 10 observaciones por variable.

-   Accede a la octava observaci√≥n de variable2 de cada data.frame

### Importar y exportar datos

Muy √∫til cuando organizamos los datos en R y queremos compartirlos.

<!--# ja: creo que por ahora haria todo con r base y una vez que quede esto claro nos metemos con tidyverse-->

```{r exportar}
#| eval: false
write_delim(x = mitibble, file = "misdatos.csv", delim = ",")
```

```{r importar}
#| eval: false
taludes <- read_delim(file = "DatosCursoR/taludes.csv", delim = ",")
```

Comprobar los datos

```{r comprobar}
#| eval: false
taludes 
str(taludes)
names(taludes) # nombre de las variables (columnas)
```

Uno de los problemas m√°s comunes es que R no reconoce bien la naturaleza de nuestra variable.

```{r importar_factor}
#| eval: false
# aqu√≠ especificamos que Luz y Agua son factores:
taludes_bien <- read_delim(file = "DatosCursoR/taludes.csv", delim = ",", col_types = list(Luz = "f", Agua = "f"))
# para entender qu√© es un factor: https://es.r4ds.hadley.nz/15-factors.html
summary(taludes) 
summary(taludes_bien)
```

### Tidyverse

[*Tidyverse*](https://www.tidyverse.org/) es una colecci√≥n de paquetes (meta-paquete) de R. El n√∫cleo contiene 8 paquetes principales (`readr`, `tibble`, `dplyr`, `tidyr`, `stringr`, `forcats`, `ggplot2` y `purrr`), que comparten el mismo dise√±o, as√≠ como una gram√°tica y estructura de datos comunes. En el centro de la filosof√≠a de tidyverse se encuentra la noci√≥n de ‚Äúdatos ordenados‚Äù (*Tidy Data*). Hadley Wickham (principal desarrollador de *tidyverse*) los define como ‚Äúf√°ciles de manipular, modelar y visualizar, y que tienen una estructura espec√≠fica: cada variable es una columna, cada observaci√≥n es una fila y cada valor es una celda‚Äù. Adem√°s de la estructura de los datos, tidyverse puede considerarse un dialecto del lenguaje de programaci√≥n R que discretiza funciones amplias de R base (p. ej. merge) en diversas funciones espec√≠ficas (p. ej. `left_join`, `right_join`).

A continuaci√≥n, se muestran cuatro principios b√°sicos para una introducci√≥n sencilla a este meta-paquete (https://design.tidyverse.org/unifying.html):

-   Centrado en humanos: tiene un dise√±o intuitivo que facilita su uso y accesibilidad para el usuario, estando dise√±ado espec√≠ficamente para respaldar las actividades de un analista de datos humano.

-   Consistencia: todos los paquetes est√°n dise√±ados para trabajar con datos ordenados (*Tidy Data*), y las funciones de los paquetes tienen una nomenclatura com√∫n y congruente. Esto permite que un usuario que aprende sobre una funci√≥n o paquete pueda aplicar ese conocimiento a otros, facilitando as√≠ la tarea de recordar y deducir c√≥digo de manera m√°s sencilla.

-   Componiblidad: permite al usuario resolver problemas complejos dividi√©ndolos en peque√±as partes, que pueden combinarse utilizando el operador *pipe*, ya sea el del paquete `magrittr` (`%>%`) o el creado recientemente en R base (`|>`).

-   Inclusividad: no se trata s√≥lo de la colecci√≥n de paquetes, sino tambi√©n la comunidad de personas que los usan, bas√°ndose en la ayuda entre usuarios y generando un ambiente inclusivo. Dos ejemplos destacados de este √∫ltimo principio son la existencia de una gu√≠a de estilo para el flujo de trabajo y [escritura de c√≥digo](https://style.tidyverse.org/index.html) o el desarrollo de un m√©todo espec√≠fico para solicitar ayuda a la comunidad y obtener asesoramiento mediante ejemplos reproducibles (`reprex`).

![Esquema comparativo entre tidyverse y R base donde se muestra el flujo de trabajo y funciones de ejemplo para cada paso de an√°lisis de datos desde su importaci√≥n en R hasta la comunicaci√≥n de los resultados obtenidos. Extraido de [*Tidyverse: colecci√≥n de paquetes de R para la ciencia de datos*](https://revistaecosistemas.net/index.php/ecosistemas/article/view/2745)](images/nota_workflow_v2_white.png)

üí°Los dos operador *pipe* tienen peque√±as [diferencias](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) pero en general el comportamiento es el mismo. La informaci√≥n sobre *tidyverse* est√° extraida de la nota ecoinform√°tica [*Tidyverse: colecci√≥n de paquetes de R para la ciencia de datos*](https://revistaecosistemas.net/index.php/ecosistemas/article/view/2745). Leer la nota para m√°s informaci√≥n sobre *tidyverse* y diferencias con R base.

```{r pipe}

mivector <- c(6, 4)
mean(mivector)
mivector |> 
  mean() # CTRL + SHIFT + M para poner un pipe

```

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
