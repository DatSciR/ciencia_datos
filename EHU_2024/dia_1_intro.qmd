---
title: | 
  | Ciencia de datos en R ![](images/Escuela de Doctorado_trilingue_positivo.png){width=80%,fig-align="right"}
subtitle: "Organizando datos: el d√≠a a d√≠a"
author: Julen Astigarraga and Ver√≥nica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-title: "√çndice"
format:
  html: default
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

## Introducci√≥n

En este curso, exploraremos tanto los fundamentos te√≥ricos como las aplicaciones pr√°cticas de la ciencia de datos en R. Abordaremos desde tareas comunes que nos enfrentamos en nuestro d√≠a a d√≠a, como la limpieza y transformaci√≥n de datos, hasta nociones m√°s avanzadas de visualizaci√≥n y programaci√≥n. Adem√°s, aprenderemos a utilizar herramientas para generar documentos reproducibles y colaborativos. Durante el curso, combinaremos la teor√≠a con la pr√°ctica, adaptando las lecciones a los problemas espec√≠ficos de cada asistente, los cuales ir√°n evolucionando d√≠a a d√≠a.

El objetivo principal es garantizar que tanto aquellos con conocimientos b√°sicos en ciencia de datos como aquellos con un nivel m√°s avanzado puedan beneficiarse y llevar consigo nuevos aprendizajes al finalizar el curso.

Dentro del modelo de ciencia de datos de Hadley Wickham (@fig-datascience), el curso de centra en el marco que envuelve todo el proceso, es decir, la programaci√≥n.

![Modelo de ciencia de datos de Hadley Wickham. Traducido de <https://r4ds.hadley.nz/intro#fig-ds-diagram>](images/datascience.png){#fig-datascience}

## Estructura del curso

+-----------------------------------------------------+--------------------------------------+
| Bloques                                             | Contenido                            |
+=====================================================+======================================+
| Organizar datos: el d√≠a a d√≠a                       | ‚Ä¢ Importar                           |
|                                                     |                                      |
|                                                     | ‚Ä¢Explorar                            |
|                                                     |                                      |
|                                                     | ‚Ä¢Limpiar                             |
|                                                     |                                      |
|                                                     | ‚Ä¢Transformar                         |
|                                                     |                                      |
|                                                     | ‚Ä¢Manejar                             |
+-----------------------------------------------------+--------------------------------------+
| Visualizaci√≥n: contando historias                   | ‚Ä¢Fundamentos de visualizaci√≥n        |
|                                                     |                                      |
|                                                     | ‚Ä¢Bases: gr√°ficos por capas           |
|                                                     |                                      |
|                                                     | ‚Ä¢Visualizaci√≥n avanzada              |
|                                                     |                                      |
|                                                     | ‚Ä¢Introducci√≥n a la creaci√≥n de mapas |
+-----------------------------------------------------+--------------------------------------+
| Programaci√≥n: aprendiendo a programar con funciones | ‚Ä¢Funciones                           |
|                                                     |                                      |
|                                                     | ‚Ä¢Estilo de c√≥digo                    |
|                                                     |                                      |
|                                                     | ‚Ä¢Iteraciones                         |
|                                                     |                                      |
|                                                     | ‚Ä¢Programaci√≥n funcional              |
+-----------------------------------------------------+--------------------------------------+
| Comunicaci√≥n: generando documentos reproducibles    | ‚Ä¢Introducci√≥n a R Markdown           |
|                                                     |                                      |
|                                                     | ‚Ä¢Introducci√≥n a Quarto               |
|                                                     |                                      |
|                                                     | ‚Ä¢R Markdown vs Quarto                |
|                                                     |                                      |
|                                                     | ‚Ä¢Trabajos reproducibles              |
+-----------------------------------------------------+--------------------------------------+
| Colaboraci√≥n: trabajando en equipo                  | ‚Ä¢Introducci√≥n a Git                  |
|                                                     |                                      |
|                                                     | ‚Ä¢Introducci√≥n a GitHub               |
|                                                     |                                      |
|                                                     | ‚Ä¢Flujo de trabajo en Git y GitHub    |
|                                                     |                                      |
|                                                     | ‚Ä¢Trabajos colaborativos              |
+-----------------------------------------------------+--------------------------------------+

## Qui√©nes somos

Coordinamos el [grupo de trabajo de Ecoinform√°tica](https://ecoinfaeet.github.io/website/index.html) de la Asociaci√≥n Espa√±ola de Ecolog√≠a Terrestre.

Y vosotros ¬øqui√©nes sois?



# further info


-   aprender las bases de la programaci√≥n en R

-   aprender estilos de c√≥digo que facilitan su comprensi√≥n (üìù)


## Introducci√≥n a la programaci√≥n en R
<!--# ja: esta secci√≥n lo podemos enviar al primer dia cuando hacemos la intro -->

![El proceso de aprendizaje en R, por Allison Horst. https://allisonhorst.com/everything-else](images/e684f0da-13b1-4d00-ab25-37814e79ee1e.png){width="362"}

### Conceptos b√°sicos

-   R: lenguaje de programaci√≥n din√°mico (se interpreta el c√≥digo en el momento que se ejecuta).

-   RStudio: es un entorno de desarrollo integrado para programar en R. Tiene cuatro zonas diferenciadas: el editor de c√≥digo, la consola (donde se ejecuta el c√≥digo), el navegador del espacio de trabajo (con el entorno ‚Äì*environment-* y el historial de comandos) y el mix de abajo a la derecha (Archivos, Gr√°ficos, Paquetes, Ayuda).

-   Objetos: cualquier elemento almacenado con un nombre espec√≠fico. Pueden ser de muchos tipos: `numeric`, `integer`, `logical`, `data.frame`, `SpatVector`, etc.

-   Funciones: objetos de R que toman un vector de entrada y dan como resultado otro vector haciendo una acci√≥n concreta (funcionalidad espec√≠fica). Son los *bloques de construcci√≥n* fundamentales en cualquier script de R que es un lenguaje funcional.

    ![](images/function.png)

> Para comprender la computaci√≥n en R, resultan √∫tiles dos lemas:
>
> \- Todo lo que existe es un objeto.
>
> \- Todo lo que sucede es una llamada a funci√≥n.
>
> --- John Chambers ([Advanced R](https://adv-r.hadley.nz/index.html))

-   Paquetes o librerias: contienen funciones reutilizables, documentaci√≥n sobre c√≥mo usarlas y datos de ejemplo. Son las unidades fundamentales de c√≥digo reproducible en R.

-   CRAN: the Comprehensive R Archive Network.

```{r primeros_pasos_programacion}

3 + 2 # ejecuto un comando con CTRL+ENTER (CTRL+R)
15 / 20 * 100
1:50

sum(1:3) # funci√≥n y argumentos
?sum

# install.packages("palmerpenguins")
library(palmerpenguins) # la funcion library carga paquetes

palmerpenguins::penguins # :: permite explorar que hay dentro de los paquetes
# loadedNamespaces()

guau <- 2 # flecha de asignacion
guau # al ejecutar un objeto el nombre se sustituye por su contenido

guau + 4
miau <- guau + 4 + guau
miau

str(miau)

# objetos un poco m√°s complejos
miprimerdataframe <- data.frame(columna1 = guau,
  columna2 = miau)
str(miprimerdataframe)

miprimeralista <- list(elemento1 = guau,
  elemento2 = miau)
str(miprimeralista)
```

#### Ejercicio

1.  Elije un n√∫mero y multiplicalo por 3

2.  Crea un objeto que contenga 100 valores entre 1900 y 2000

3.  Suma un n√∫mero a tu objeto

4.  Multiplica tu objeto por s√≠ mismo

üìùLos nombre de los objetos deben ser descriptivos y no pueden contener s√≠mbolos especiales (`^`, `!`, `$`, `@`, `+`, `-`, `/`, `*`).

üìùR es sensible a las may√∫sculas. Mejor no usarlas.

### Tidyverse
<!--# ja: esta secci√≥n lo podemos enviar al primer dia cuando hacemos la intro -->

[*Tidyverse*](https://www.tidyverse.org/) es una colecci√≥n de paquetes (meta-paquete) de R desarrollado por Hadley Wickham. Contiene ocho paquetes principales: `readr`, `tibble`, `dplyr`, `tidyr`, `stringr`, `forcats`, `ggplot2` y `purrr`. *Tidyverse* puede considerarse un dialecto del lenguaje de programaci√≥n de R y, por ello, puede resultar dif√≠cil de aprender para gente con experiencia en el lenguaje tradicional de R base. Sin embargo, en este curso queremos ense√±ar las bases de programaci√≥n utilizando *tidyverse* ya que en las secciones de iteraci√≥n utilizaremos fundamentalmente `purrr` por razones que explicaremos m√°s adelante.

*Tidyverse* est√° dise√±ado para respaldar las actividades de un analista de datos humano por lo que sus estructuras de programaci√≥n resultan m√°s l√≥gicas para la mente humana. Todos los paquetes est√°n dise√±ados para trabajar con datos ordenados ([*tidy data*](https://cran.r-project.org/web/packages/tidyr/vignettes/tidy-data.html)), es decir, aquellos donde cada columna es una variable, cada fila una observaci√≥n y cada celda tiene un valor. Adem√°s, las funciones est√°n preparadas para concatenarse a trav√©s del operador *pipe* (`%>%` del paquete `magrittr` o `|>` de R base), que coge lo que est√° en su izquierda y lo utiliza como el primer argumento de la funci√≥n que est√° en su derecha. Esto permite seguir un flujo de lectura de izquierda a derecha, m√°s c√≥modo para la mayor√≠a de la gente.

üí°Los dos operador *pipe* tienen peque√±as [diferencias](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) pero en general el comportamiento es el mismo.

```{r pipe}

mivector <- c(6, 4)
mean(mivector)
mivector |> 
  mean() # CTRL+SHIFT+M para poner un pipe

```























------------------------------------------------------------------------

![El proceso de aprendizaje en R, por Allison Horst. https://allisonhorst.com/everything-else](images/e684f0da-13b1-4d00-ab25-37814e79ee1e.png){width="362"}

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
