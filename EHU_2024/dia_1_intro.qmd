---
title: | 
  | Ciencia de datos en R ![](images/Escuela de Doctorado_trilingue_positivo.png){width=80%,fig-align="right"}
subtitle: "Introducci√≥n (Organizando datos: el d√≠a a d√≠a)"
author: Julen Astigarraga and Ver√≥nica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-depth: 4
toc-title: "√çndice"
format:
  html:
    link-external-newwindow: true
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

## Qui√©nes somos

Ver√≥nica Cruz-Alonso (veronica.cral\@gmail.com) y Julen Astigarraga (julenastigarraga\@gmail.com). Coordinamos el [grupo de trabajo de Ecoinform√°tica](https://ecoinfaeet.github.io/website/index.html) de la Asociaci√≥n Espa√±ola de Ecolog√≠a Terrestre. En [DatSciR](https://github.com/DatSciR) publicamos los materiales de los cursos que impartimos.

Y vosotros ¬øqui√©nes sois?

<https://www.menti.com/alpvk2yr4cao>

¬øY qu√© es R y de d√≥nde procede?

[R es un lenguaje y un entorno para la computaci√≥n estad√≠stica y gr√°fica](https://www.r-project.org/about.html)

[Un poco de historia de R contada por Jumping Rivers](https://www.jumpingrivers.com/misc/timeline/)

## Presentaci√≥n

En este curso exploraremos tanto los fundamentos te√≥ricos como las aplicaciones pr√°cticas de la ciencia de datos en R. Abordaremos desde tareas comunes con las que nos enfrentamos en nuestro d√≠a a d√≠a, como la limpieza y transformaci√≥n de datos, hasta nociones m√°s avanzadas de visualizaci√≥n y programaci√≥n. Adem√°s, aprenderemos a utilizar herramientas para generar documentos reproducibles y colaborativos. Durante el curso, combinaremos la teor√≠a con la pr√°ctica, adaptando las lecciones a los problemas espec√≠ficos de cada asistente, los cuales ir√°n evolucionando d√≠a a d√≠a.

El objetivo principal es que tanto aquellos con conocimientos b√°sicos en ciencia de datos como aquellos con un nivel m√°s avanzado puedan beneficiarse y llevar consigo nuevos aprendizajes al finalizar el curso.

![Modelo de ciencia de datos de Hadley Wickham, Mine √áetinkaya-Rundel y Garrett Grolemund. Traducido de https://r4ds.hadley.nz/intro#fig-ds-diagram](images/datascience.png){#fig-datascience}

## Estructura del curso

+-----------------------------------------------------+--------------------------------------------------------------------+
| Bloques                                             | Contenido                                                          |
+=====================================================+====================================================================+
| Organizar datos: el d√≠a a d√≠a                       | Introducci√≥n a la programaci√≥n en R                                |
|                                                     |                                                                    |
|                                                     | Tidyverse                                                          |
|                                                     |                                                                    |
|                                                     | Importar, filtrar, seleccionar, transformar, unir y exportar datos |
+-----------------------------------------------------+--------------------------------------------------------------------+
| Visualizaci√≥n: contando historias                   | Fundamentos de visualizaci√≥n                                       |
|                                                     |                                                                    |
|                                                     | Bases: gr√°ficos por capas                                          |
|                                                     |                                                                    |
|                                                     | Visualizaci√≥n avanzada                                             |
|                                                     |                                                                    |
|                                                     | Introducci√≥n a la creaci√≥n de mapas                                |
+-----------------------------------------------------+--------------------------------------------------------------------+
| Programaci√≥n: aprendiendo a programar con funciones | Funciones                                                          |
|                                                     |                                                                    |
|                                                     | Estilo de c√≥digo                                                   |
|                                                     |                                                                    |
|                                                     | Iteraciones                                                        |
|                                                     |                                                                    |
|                                                     | Programaci√≥n funcional                                             |
+-----------------------------------------------------+--------------------------------------------------------------------+
| Comunicaci√≥n: generando documentos reproducibles    | Introducci√≥n a R Markdown                                          |
|                                                     |                                                                    |
|                                                     | Introducci√≥n a Quarto                                              |
|                                                     |                                                                    |
|                                                     | R Markdown vs Quarto                                               |
|                                                     |                                                                    |
|                                                     | Trabajos reproducibles                                             |
+-----------------------------------------------------+--------------------------------------------------------------------+
| Colaboraci√≥n: trabajando en equipo                  | Introducci√≥n a Git                                                 |
|                                                     |                                                                    |
|                                                     | Introducci√≥n a GitHub                                              |
|                                                     |                                                                    |
|                                                     | Flujo de trabajo en Git y GitHub                                   |
|                                                     |                                                                    |
|                                                     | Trabajos colaborativos                                             |
+-----------------------------------------------------+--------------------------------------------------------------------+

## Din√°mica del curso

Cada d√≠a combinaremos teor√≠a con ejercicios. Idealmente, el cuarto y quinto d√≠a tendremos tiempo para que cada uno trabaje con sus propios datos. Todos los apuntes y ejercicios resueltos estar√°n disponibles en el [repositorio de GitHub del curso](https://github.com/DatSciR/ciencia_datos). Si alguien tiene alguna duda o sugerencia, nos puede contactar por correo electr√≥nico o publicarlo en las [discusiones del repositorio de GitHub](https://github.com/DatSciR/ciencia_datos/discussions/2) ¬°as√≠ aprenderemos entre todos! üòâ

![El proceso de aprendizaje en R, por Allison Horst. https://allisonhorst.com/everything-else](images/e684f0da-13b1-4d00-ab25-37814e79ee1e.png){width="362"}

## Objetivos del d√≠a 1

-   Aprender conceptos b√°sicos de la programaci√≥n en R.

-   Aprender funciones b√°sicas que nos permitan importar, explorar, limpiar, transformar y manejar datos.

-   Aprender estilos de c√≥digo que facilitan su comprensi√≥n (üìù)

## Conceptos b√°sicos

-   R: lenguaje de programaci√≥n din√°mico (se interpreta el c√≥digo en el momento que se ejecuta).

-   RStudio: entorno de desarrollo integrado para programar en R. Tiene cuatro zonas diferenciadas: el editor de c√≥digo, la consola (donde se ejecuta el c√≥digo), el navegador del espacio de trabajo (con el entorno ‚Äì*environment-* y el historial de comandos) y el mix de abajo a la derecha (Archivos, Gr√°ficos, Paquetes, Ayuda).

-   Objetos: cualquier elemento almacenado con un nombre espec√≠fico. Pueden ser de muchos tipos: `numeric`, `integer`, `logical`, `data.frame`, `SpatVector`, etc.

-   Funciones: objetos de R que toman un vector de entrada y dan como resultado otro vector haciendo una acci√≥n concreta (funcionalidad espec√≠fica). Son los *bloques de construcci√≥n* fundamentales en cualquier script de R que es un lenguaje funcional.

![](images/function.png)

> Para comprender la computaci√≥n en R, resultan √∫tiles dos lemas:
>
> \- Todo lo que existe es un objeto.
>
> \- Todo lo que sucede es una llamada a funci√≥n.
>
> --- John Chambers ([Advanced R](https://adv-r.hadley.nz/index.html))

-   Paquetes o librerias: contienen funciones reutilizables, documentaci√≥n sobre c√≥mo usarlas y datos de ejemplo. Son las unidades fundamentales de c√≥digo reproducible en R.

-   CRAN: the Comprehensive R Archive Network.

## Comenzando a trabajar en R

### El espacio de trabajo

El directorio de trabajo es la carpeta de nuestro ordenador donde estamos trabajando.

```{r wd}
#| eval: false

getwd() # saber directorio de trabajo 
setwd("C:/Users/veruk/Desktop/Disco/Curso Ciencia de Datos/ciencia_datos") # ojo con la ruta / o \\
```

No es recomendable establecer el directorio de trabajo manualmente porque el trabajo deja de ser reproducible. Es mejor crear desde el principio un proyecto en R ligado a un directorio relativo que contenga todos los datos de entrada, los scripts y los resultados del script. Al abrir el proyecto, se sincroniza con pesta√±a Files.

üí°Para crear un proyecto: Archivo \> Nuevo proyecto

#### Ejercicio

Crea un proyecto para el curso de de ciencia de datos

### Instalar y cargar paquetes

üí°Para ejecutar un comando: Ctrl + Enter (Ctrl + R)

```{r instalar}

# install.packages("tidyverse", dep = T) # dep = T significa instalar dependencias

library(tidyverse)

?tidyverse
?select
```

### Operaciones aritm√©ticas (R como calculadora)

```{r aritmetica}

5 + 6
5 * 6
60 / 4
5 + 4 - 2
5 + 4 * 5
(5 + 4) * 5
log(10) # logaritmo neperiano 
log10(10) 
exp(1) 
3 ^ 2 
3 ^ 2 / 3 
sqrt(16) 
pi 
sin(pi / 2) # en radianes 
cos(pi / 2)
tan(pi / 2)
asin(1) * 2
acos(1)
```

## Objetos de R

### Nombramiento de objetos

Al asignar un nombre a un objeto podemos llamarlos siempre que necesitemos a lo largo del script. No es necesario guardar (exportar) la mayor√≠a de los objetos que tenemos en el entorno de trabajo de R a nuestro ordenador, lo importante es conservar el script con el que se generan.

```{r crear_obj}
x <- 4.5 # shortcut para la flecha de asignaci√≥n Alt + "-" 
y <- "objeto" # si el objeto contiene letras, usar comillas 
class(x) # funci√≥n para ver de que clase es nuestro objeto 
class(y) 
x # Llamar al vector para saber su valor 
y
```

üìùLos nombre de los objetos deben ser descriptivos y no pueden contener s√≠mbolos especiales (`^`, `!`, `$`, `@`, `+`, `-`, `/`, `*`).

üìùR es sensible a las may√∫sculas. Mejor no usarlas.

### Tipos de objetos

#### Vectores

Un vector es la estructura de datos m√°s sencilla en R. Un vector es una colecci√≥n de uno o m√°s datos del mismo tipo.

```{r vectores}

v1 <- c(2.4, 4, 6, 3.2) # si quiero asignar mas de un valor uso "c" (concatenar) 
v1 
v1 * 100 # puedo operar con los vectores 
log(v1)
v2 <- c(1, 3, 4, 8) # pero tambi√©n entre vectores 
v1 + v2
v3 <- v1 - v2 
v3

mean(x = v2) # funciones ya programadas 
# ?mean # ayuda de funciones
sd(v2) 
length(v2) # n vector 
max(v2) 
min(v2)

# funciones que facilitan la creaci√≥n de vectores
rep(x = 1, times = 4) 
1:10 # dos puntos de a a b 
seq(from = 1, to = 20, by = 2) 
c(v1, v2) 
c(v1, rep(0, 3), v1)
```

#### Ejercicio

-   Elije un n√∫mero y multiplicalo por 3

-   Crea un objeto que contenga 100 valores entre 1900 y 2000

-   Suma un n√∫mero a tu objeto

-   Multiplica tu objeto por s√≠ mismo

-   Crea un objeto que contenga el n√∫mero 5 repetido 9 veces junto con una secuencia de 5 a 50 cada 5 elementos

-   ¬øCu√°l es la longitud del objeto anterior?

Para crear vectores se pueden usar otras estrategias como las que ten√©is recogidas a continuaci√≥n.

```{r mas_vectores}

rep(x = 1, times = 4) 
rep(1:4, times = 2) 
rep(1:4, each = 2) 
rep(1:4, times = 1:4)
rep(x = c("gato", "perro", "pez"), times = c(5, 3, 1))
rnorm(10, mean = 4, sd = 2.2)
```

#### Matrices

Las matrices pueden ser descritas como vectores multidimensionales. Al igual que un vector, √∫nicamente pueden contener datos de un s√≥lo tipo, pero adem√°s de largo, tienen m√°s dimensiones.

```{r matrices}

mivector <- sample(x = 1:10, size = 1000, replace = T) # sample: funci√≥n para crear numeros aleatorios 

mimatriz <- matrix(mivector, nrow = 100, ncol = 10) # matrix: funci√≥n para convertir vector en matriz. matrix va a rellenar por columnas por defecto

str(mivector) # mostrar estructura datos 
str(mimatriz)

summary(mivector) # resumen de los datos 
summary(mimatriz)

a <- c(1, 2, 3, 4) 
b <- c(1, 2, 3, 4) 
d <- c("hi", "hola", "hola", "hi")

mimatriz_num <- matrix(c(a, b), nrow = 4, ncol = 2) 
mimatriz_num

mimatriz_car <- matrix(c(a, b, d), nrow = 4, ncol = 3) mimatriz_car

summary(mimatriz_num) 
summary(mimatriz_car)
```

#### Bases de datos (data.frame)

Los data.frames son estructuras de datos de dos dimensiones (rectangulares) que pueden contener datos de diferentes tipos, por lo tanto, son heterog√©neas. Esta estructura de datos es la m√°s usada para realizar an√°lisis de datos.

```{r dataframes}

midataframe <- data.frame(
  mivariable1 = a, 
  mivariable2 = b, 
  mivariable3 = d)

View(midataframe)

# un tibble es un data.frame de tidyverse, con caracter√≠sticas mejoradas

mitibble <- tibble(
  mivariable1 = a, 
  mivariable2 = b, 
  mivariable3 = d)

str(mitibble) 
str(midataframe) 

summary(mitibble) 
summary(midataframe) 

mitibble
midataframe
```

#### Listas

Las listas, al igual que los vectores, son estructuras de datos unidimensionales, s√≥lo tienen largo, pero a diferencia de los vectores cada uno de sus elementos puede ser de diferente tipo o incluso de diferente clase, por lo que son estructuras heterog√©neas.

```{r listas}

e <- c(TRUE, TRUE, TRUE, FALSE, FALSE)

milista <- list(a, b, d, e)
milista 

str(milista) 
summary(milista)

milista2 <- list(a, b, d, e, mivector, mimatriz, midataframe)
str(milista2)
```

### Indexaci√≥n

```{r acceder}

mivector 
mivector[505]

mimatriz 
mimatriz[20, 9] # [filas, columnas] 
mimatriz[20, ] # selecciono todas las columnas de la fila 20
mimatriz[, 9] # selecciono todas las filas de la columna 9

midataframe 
midataframe[3, 3] 
midataframe[3, "mivariable3"] 
midataframe[, "mivariable3"] 
midataframe$mivariable3

milista 
milista[[4]] 
milista[[4]][4]
```

üí°Puedes leer m√°s sobre los tipos de objetos en R [aqu√≠](https://bookdown.org/jboscomendoza/r-principiantes4/estructuras-de-datos.html).

üìù Usar espacios antes y despu√©s de `=` y despu√©s de `,` hace mucho m√°s f√°cil identificar los argumentos de la funci√≥n y, en general, todos los componentes.

```{r espacios}

set.seed(123)
mean(rnorm(10, mean = 50, sd = 25) / 12, trim = 0.2)

set.seed(123)
mean(rnorm(10,mean=50,sd=25)/12,trim=0.2)

```

#### Ejercicio

-   Crea una lista que contenga dos data.frame con dos variables cada uno (variable1 y variable2) y diez observaciones por variable.

-   Accede a la octava observaci√≥n de variable2 de cada data.frame.

### Tidyverse

[*Tidyverse*](https://www.tidyverse.org/) es una colecci√≥n de paquetes (meta-paquete) de R. El n√∫cleo contiene ocho paquetes principales (`readr`, `tibble`, `dplyr`, `tidyr`, `stringr`, `forcats`, `ggplot2` y `purrr`), que comparten el dise√±o, la gram√°tica y la estructura de los datos que necesitan. En el centro de la filosof√≠a de tidyverse se encuentra la noci√≥n de ‚Äúdatos ordenados‚Äù (*tidy data*). Hadley Wickham (principal desarrollador de *tidyverse*) los define como ‚Äúf√°ciles de manipular, modelar y visualizar, y que tienen una estructura espec√≠fica: cada variable es una columna, cada observaci√≥n es una fila y cada valor es una celda‚Äù. *Tidyverse* puede considerarse un dialecto del lenguaje de programaci√≥n R que discretiza funciones amplias de R base (p. ej. `merge`) en diversas funciones espec√≠ficas (p. ej. `left_join`, `right_join`).

Los [tres principios b√°sicos](https://design.tidyverse.org/unifying.html) de este meta-paquete son:

-   Centrado en humanos: tiene un dise√±o intuitivo que facilita su uso y accesibilidad para el usuario, ya que est√° dise√±ado espec√≠ficamente para respaldar las actividades de un analista de datos humano.

-   Consistencia: todos los paquetes est√°n dise√±ados para trabajar con datos ordenados (*tidy data*), y las funciones de los paquetes tienen una nomenclatura com√∫n y congruente. Esto permite que un usuario que aprende sobre una funci√≥n o paquete pueda aplicar ese conocimiento a otros, facilitando as√≠ la tarea de recordar y deducir c√≥digo.

-   Componiblidad: permite al usuario resolver problemas complejos dividi√©ndolos en peque√±as partes, que pueden combinarse utilizando el operador *pipe*, ya sea el del paquete `magrittr` (`%>%`) o el creado recientemente en R base (`|>`).

üí°Los dos operador *pipe* tienen peque√±as [diferencias](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) pero en general el comportamiento es el mismo.

![Esquema comparativo entre *tidyverse* y R base donde se muestra el flujo de trabajo y funciones de ejemplo para cada paso de an√°lisis de datos desde su importaci√≥n en R hasta la comunicaci√≥n de los resultados obtenidos. Extraido de [*Tidyverse: colecci√≥n de paquetes de R para la ciencia de datos*](https://revistaecosistemas.net/index.php/ecosistemas/article/view/2745)](images/nota_workflow_v2_white.png)

üí°Para m√°s informaci√≥n sobre *tidyverse* y las diferencias con R base te recomendamos leer [*Tidyverse: colecci√≥n de paquetes de R para la ciencia de datos*](https://revistaecosistemas.net/index.php/ecosistemas/article/view/2745).

```{r pipe}

length(unique(d))

d |> unique() |> length() # Ctrl + Shift + M para poner un pipe

```

En este curso realizaremos las distintas tareas que forman parte de la ciencia de datos utilizando *tidyverse*, aunque tambi√©n se podr√≠an llevar a cabo con R base. Consideramos que los cuatro pilares b√°sicos de *tidyverse* (centrado en humanos, consistencia y componibilidad) facilitan tanto el aprendizaje como el trabajo diario, permitiendo realizar las mismas acciones de manera m√°s sencilla, aunque reconocemos que esto puede variar seg√∫n la persona.

### ¬øQui√©n responde a mis dudas?

-   [RStudio User Guide](https://docs.posit.co/ide/user)

-   [Cheatsheet de buenas pr√°cticas en R](https://rstudio.github.io/cheatsheets/R-best-practice.pdf)

-   [Posit Recipes](https://posit.cloud/learn/recipes) y en general [Posit Resources](https://posit.co/resources)

-   Ayuda \> Cheat Sheets

-   [Stack Overflow: plataforma de preguntas y respuestas para programadores profesionales y aficionados](https://stackoverflow.com)

-   [Comunidad de RStudio/Posit](RStudio%20community)

-   [GitHub copilot](https://github.com/features/copilot)

-   [ChatGPT](https://chatgpt.com) y similares

-   Slack del [Grupo de Ecoinform√°tica de la AEET](https://ecoinfaeet.github.io/website/index.html)

-   [Discusiones del repositorio del curso de GitHub](https://github.com/DatSciR/ciencia_datos/discussions/2)

-   Para dudas relacionadas con errores de paquetes: repositorio de GitHub del paquete en cuesti√≥n (p. ej. <https://github.com/tidyverse/dplyr/issues>)

-   Pedir ayuda utilizando ejemplos reproducibles con {[reprex](#0)}.

![Por Allison Horst. https://allisonhorst.com/everything-else](images/rhelpers.png){width="538"}

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
