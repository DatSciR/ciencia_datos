---
title: | 
  | Ciencia de datos en R ![](images/Escuela de Doctorado_trilingue_positivo.png){width=80%,fig-align="right"}
subtitle: "Organizando datos: el día a día"
author: Julen Astigarraga and Verónica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-depth: 4
toc-title: "Índice"
format:
  html:
    link-external-newwindow: true
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

## Importar y renombrar datos

### [Read_delim](https://readr.tidyverse.org/reference/read_delim.html): leer datos desde fuera de R

```{r read}
#| eval: false

taludes <- read_delim(file = "taludes.csv", delim = ",")

taludes

taludes_bien <- read_delim(file = "taludes.csv", 
  delim = ",", col_types = list(Luz = "f", Agua = "f"))

taludes_bien
View(taludes_bien)
summary(taludes_bien)
glimpse(taludes_bien)
```

### [Rename](https://dplyr.tidyverse.org/reference/rename.html): cambiar nombres de variables (columnas)

```{r rename}
#| eval: false  

names(taludes_bien)

taludes_bien <- taludes_bien |>    
  rename(biomasa = Biomasa, # nombre nuevo = nombre viejo          
         nivel_luz = Luz, 
         agua_estival = Agua)
```

📝 Ajustar sangría de código: Ctrl + i; Reformatear código: Ctrl + Shift + a

## Funciones básicas de filtrado y selección

### [Slice](https://dplyr.tidyverse.org/reference/slice.html): filtrar filas según el índice numérico

```{r slice}
#| eval: false

taludes_bien |> 
  slice(1) # shortcut para el pipe: CTRL + SHIFT + M 

taludes_bien |>
  slice(1, 5)

taludes_bien |> 
  slice(1:6)

taludes_bien |>
  slice(-c(1:5))

```

### [Arrange](https://dplyr.tidyverse.org/reference/arrange.html): ordenar filas por los valores de una o más variables (columnas)

```{r arrange}
#| eval: false

taludes_bien |>
  arrange(biomasa)

taludes_bien |> 
  arrange(desc(biomasa))

```

### [Filter](https://dplyr.tidyverse.org/reference/filter.html): filtrar filas utilizando condiciones

Se necesita un vector de filtrado que contenga valores lógicos (TRUE/FALSE).

```{r filter}
#| eval: false

taludes_bien |>
  filter(nivel_luz == "Nivel 1") # filtrar por filas que cumplen un patrón 

taludes_bien |>
  filter(nivel_luz == "Nivel 1" & biomasa > 4) # combinar criterios: AND

taludes_bien |>
  filter(nivel_luz == "Nivel 1" | biomasa > 5) # combinar criterios: OR

taludes_bien |>
  filter(nivel_luz %in% c("Nivel 1", "Nivel 3")) # combinar criterios: %in% 

```

#### Ejercicio

-   Lee el data.frame "Macrobenthos.txt". Pista: el delimitador entre datos es el tabulador ("\t").

💡"Macrobenthos.txt" es una base de datos sobre la abundancia de distintos grupos taxonómicos de macroinvertebrados marinos ([Zuur et al. 2009](https://link.springer.com/book/10.1007/978-0-387-93837-0)).

-   Crea un subset de datos que contenga las filas de la 1 a la 10 y de la 390 a la 400.

-   Crea un subset que NO contenga el Taxon número 1. Pista: revisa los [operadores de R](https://bookdown.org/jboscomendoza/r-principiantes4/operadores-relacionales.html).

-   Crea un subset con las observaciones del Taxon 2 donde se haya registrado una abundancia mayor de 50 o menor o igual a 5. Pista: necesitarás paréntesis para filtrar.

-   ¿Cuántas filas han quedado?

### [Select](https://dplyr.tidyverse.org/reference/select.html): seleccionar columnas utilizando condiciones

Se necesita un vector de selección que contenga valores lógicos (TRUE/FALSE).

```{r select}
#| eval: false

taludes_bien |>
  select(biomasa, agua_estival)

# ?select 

taludes_bien |>
  select(contains("a"))

# se pueden utilizar todo tipo de patrones de texto: https://rstudio.github.io/cheatsheets/strings.pdf

taludes_bien |>
  select(nivel_luz, everything()) # se puede usar para reordenar variables

```

#### Ejercicio

-   Con el data.frame "Macrobenthos.txt", crea un nuevo data.frame que contenga las variables relacionadas con el medio (de *organic matter* a *temperature*). Pista: mira la ayuda de select para ahorrar caracteres.

-   Crea un nuevo objeto con el taxon al principio y que incluya las demás columnas excepto el esfuerzo de muestreo (*effort*).

## Transformar los datos y calcular nuevas variables

### [Mutate](https://dplyr.tidyverse.org/reference/mutate.html): crear, modificar o eliminar columnas

```{r mutate}
#| eval: false

taludes_bien |>
  mutate(
    ID = 1:nrow(taludes_bien),
    # definir una variable desde cero
    supervivencia = as.factor(sample(
      c(0, 1),
      size = nrow(taludes_bien),
      prob = c(0.4, 0.6),
      replace = TRUE
    )),
    # utilizar una variable para calcular otra
    carbono = biomasa * rnorm(
      n = nrow(taludes_bien),
      mean = 0.4,
      sd = 0.2
    )
  ) |> 
  select(ID, everything())

taludes_bien |>
  mutate(
    # sobreescribir una variable. En concreto fct_recode 
    # sirve para redefinir los niveles de un factor
    agua_estival = fct_recode(
      agua_estival, sequia = "Sequia estival", lluvia = "Lluvia estival"),
    nivel_luz = fct_recode(
      nivel_luz,
      `1` = "Nivel 1",
      `2` = "Nivel 2",
      `3` = "Nivel 3"
    )
  )

taludes_bien |>
  mutate(
    estres = case_when(
      # utilizar varias variables para calcular otra nueva
      nivel_luz == 1 &
        agua_estival == "sequia" ~ "alto",
      # "Si el nivel de luz es 1 y hay sequia, el estrés será alto"
      nivel_luz == 3 & agua_estival == "lluvia" ~ "bajo",
      TRUE ~ "intermedio"
    )
  )

# repetimos todo lo anterior concatenando todo el proceso:

taludes_trans <- taludes_bien |> mutate(
           ID = 1:nrow(taludes_bien),
           supervivencia = as.factor(sample(
             c(0, 1),
             size = nrow(taludes_bien),
             prob = c(0.4, 0.6),
             replace = TRUE
           )),
           carbono = biomasa * rnorm(
             n = nrow(taludes_bien),
             mean = 0.4,
             sd = 0.2
           )
         ) |>
  select(ID, everything()) |> 
  mutate(
    agua_estival = fct_recode(agua_estival, sequia = "Sequia estival", lluvia = "Lluvia estival"),
    nivel_luz = fct_recode(
      nivel_luz,
      `1` = "Nivel 1",
      `2` = "Nivel 2",
      `3` = "Nivel 3"
    )
  ) |>
  mutate(
    estres = case_when(
      nivel_luz == 1 &
        agua_estival == "sequia" ~ "alto",
      nivel_luz == 3 &
        agua_estival == "lluvia" ~ "bajo",
      TRUE ~ "intermedio"
    )
  )

```

#### Ejercicio

-   Con el data.frame macrobenthos genera una nueva columna con la relación entre la turbidez del agua y la materia orgánica.

### [Summarise](https://dplyr.tidyverse.org/reference/summarise.html) y [group by](https://dplyr.tidyverse.org/reference/group_by.html): generar un nuevo `data.frame` resumiendo cada grupo a una fila

```{r summarise}
#| eval: false

taludes_trans |> 
  summarise(c_min = min(carbono),
            c_max = max(carbono))

```

```{r group_by}
#| eval: false

taludes_trans |>
  group_by(estres) |>  
  summarise(biomasa_min = min(biomasa),
            biomasa_mean = mean(biomasa),
            biomasa_max = max(biomasa))

```

#### Ejercicio

-   Con el data.frame macrobenthos, cuenta el número de casos que hay en cada periodo de muestreo.

-   Cuenta el número de casos distintos que hay de esfuerzo de muestreo.

-   Calcula la media de la turbidez para cada taxón.

### [Pivot](https://tidyr.tidyverse.org/reference/pivot_longer.html): transformar datos a formato largo o ancho

![La variable año está dividida en dos columnas y cada fila representa dos observaciones no una. Extraido de [R for Data Science](https://r4ds.had.co.nz/tidy-data.html). ](images/tidy_pivot_longer.png)

```{r pivot}

stocks <- tibble(
  year   = c(2015, 2015, 2016, 2016),
  half  = c(   1,    2,     1,    2),
  return = c(1.88, 0.59, 0.92, 0.17)
)

stocks |> 
  pivot_wider(names_from = year, values_from = return) |> 
  pivot_longer(`2015`:`2016`, names_to = "year", values_to = "return")
```

## [Joins](https://dplyr.tidyverse.org/reference/mutate-joins.html): unir data.frames

`*_join()` añade columnas de `y` (segundo data.frame) a `x` (primer data.frame), haciendo coincidir las observaciones en función de la variable común.

```{r joins}
#| eval: false

# join: left, right, full, inner

set.seed(123)

bloques <- tibble(ID = 1:nrow(taludes_trans), 
  bloque = sample(x = 1:2, size = nrow(taludes_trans), replace = TRUE))

taludes_trans <- taludes_trans |> 
  left_join(bloques, by = "ID") |> 
  select(ID, bloque, everything())

```

## [Write_delim](https://readr.tidyverse.org/reference/write_delim.html): guardar datos

```{r export}

write_delim(taludes_trans, file = "taludes_trans.csv", delim = ";")
# en file hay que especificar el directorio donde queremos que se guarde. Si no, se guardará en el directorio de trabajo (getwd())
```

## Enlaces de interés

-   [Hands-On Programming with R](https://rstudio-education.github.io/hopr/)

-   [R for data Science (Data transformation)](https://r4ds.had.co.nz/transform.html)

-   [Style guide](http://adv-r.had.co.nz/Style.html)

-   [Página web de *tidyverse*](https://www.tidyverse.org)

-   [Cheat sheet the dplyr](https://nyu-cdsc.github.io/learningr/assets/data-transformation.pdf)

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
