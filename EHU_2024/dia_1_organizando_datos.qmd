---
title: | 
  | Ciencia de datos en R ![](images/Escuela de Doctorado_trilingue_positivo.png){width=80%,fig-align="right"}
subtitle: "Organizando datos: el día a día"
author: Julen Astigarraga and Verónica Cruz-Alonso
date: today
date-format: "DD/MM/YYYY"
toc: true
toc-title: "Índice"
format:
  html: default
    # css: styles.css
  gfm: default
editor: visual
editor_options: 
  chunk_output_type: console
number-sections: true
---

En este curso realizaremos las distintas tareas que forman parte de la ciencia de datos utilizando *tidyverse*, aunque también se podrían llevar a cabo con R base. Consideramos que los cuatro pilares básicos de *tidyverse* (centrado en humanos, consistencia, componibilidad e inclusividad) facilitan tanto el aprendizaje como el trabajo diario, permitiendo realizar las mismas acciones de manera más sencilla, aunque reconocemos que esto puede variar según la persona.

```{r importar}
#| eval: false

taludes_bien <- read_delim(file = "DatosCursoR/taludes.csv", delim = ",", col_types = list(Luz = "f", Agua = "f"))

taludes_bien
View(taludes_bien)
summary(taludes_bien)
glimpse(taludes_bien)
```

### Funciones básicas de filtrado y selección

<!--# pondria el link a la viñeta de cada main function que explicamos -->

#### [Slice](https://dplyr.tidyverse.org/reference/slice.html): filtrar filas según el índice numérico

```{r slice}

taludes_bien |> 
  slice(1) # shortcut para el pipe: CTRL + SHIFT + M 

taludes_bien |>
  slice(1, 5)

taludes_bien |> 
  slice(1:6)

taludes_bien |>
  slice(-c(1:5))

```

#### [Rename](https://dplyr.tidyverse.org/reference/rename.html): cambiar nombres de variables

```{r rename}
taludes_bien |> 
  rename(biomasa = Biomasa, # Nombre nuevo = nombre viejo
         luz = Luz, agua = Agua)
```

📝 Ajustar sangría de código: CTRL + I 
📝 Reformatear código: CTRL + MAYÚS + A 


ESTOY AQUI
revisar lo que queda de script
añadir ejemplos del tutorial de tidyverse con penguins






# Arrange: ordenar por los valores de una o más variables

taludes_bien \|\> arrange(Biomasa)

taludes_bien \|\> arrange(desc(Biomasa))

# Filter: filtrar utilizando condiciones

# Se necesita un vector de filtrado que contenga valores TRUE/FALSE

taludes_bien

taludes_bien \|\> filter(Luz == "Nivel 1")

taludes_bien \|\> filter(Luz == "Nivel 1" & Biomasa \> 4) #Combinar criterios: AND

taludes_bien \|\> filter(Luz == "Nivel 1" \| Biomasa \> 5) #Combinar criterios: OR

taludes_bien \|\> filter(Luz %in% c("Nivel 1", "Nivel 3")) #Combinar criterios

# Ejercicio 4

# Lee el data.frame "Macrobenthos.txt".

# Pista: el delimitador entre datos es el tabulador ("\t")

# Crea un subset que contenga las filas de la 1 a la 10 y de la 390 a la 400

# Crea un subset que NO contenga el Taxon número 1.

# Pista: revisa los operadores de R (https://bookdown.org/jboscomendoza/r-principiantes4/operadores-relacionales.html)

# Crea un subset con las observaciones del Taxon 2 donde se haya registrado una abundancia mayor de 50 o menor o igual a 5

# Pista: necesitarás paréntesis para filtrar

# ¿Cuántas filas han quedado?

# Select: seleccionar columnas utilizando condiciones

# Se necesita un vector de selección que contenga valores TRUE/FALSE

taludes_bien \|\> select(Biomasa, Agua)

?select \# Seleccionar variables que tienen un patrón taludes_bien \|\> select(contains("a"))

# se pueden utilizar todo tipo de patrones de texto: https://rstudio.github.io/cheatsheets/strings.pdf

taludes_bien \|\> select(Luz, everything()) \# Se puede usar para reordenar variables

# Ejercicio 5

# Con el data.frame "Macrobenthos.txt", crea un nuevo data.frame que contenga las variables relacionadas con el medio

# (de organic matter a temperature). Pista: mira la ayuda de select para ahorrar caracteres

# Crea un nuevo objeto con el taxon al principio y que incluya las demás columnas excepto el

# esfuerzo de muestreo (effort)

#### 6. Transformar los datos y calcular nuevas variables

###### 6.1 Función mutate

# Renombramos las variables y guardamos un nuevo objeto para trabajar mejor

# con las funciones de transformación:

taludes_analisis \<- taludes_bien \|\> rename(biomasa = Biomasa, nivel_luz = Luz, agua_estival = Agua)

taludes_analisis \|\> mutate(ID = 1:nrow(taludes_bien), \# Definir una variable desde cero supervivencia = as.factor(sample(c(0, 1), size = nrow(taludes_bien), prob = c(0.4, 0.6), replace = TRUE)), carbono = biomasa \* rnorm(n = nrow(taludes_bien), mean = 0.4, sd = 0.2)) \|\> \# Utilizar una variable para calcular otra select(ID, everything())

taludes_analisis \|\> mutate( agua_estival = fct_recode( \# Sobreescribir una variable. En concreto fct_recode \# sirve para redefinir los niveles de un factor agua_estival, sequia = "Sequia estival", lluvia = "Lluvia estival"), nivel_luz = fct_recode( nivel_luz, `1` = "Nivel 1", `2` = "Nivel 2", `3` = "Nivel 3" ))

taludes_analisis \|\> mutate( estres = case_when( \# Utilizar varias variables para calcular otra nueva nivel_luz == 1 & agua_estival == "sequia" \~ "alto", \# "Si el nivel de luz es 1 y hay sequia, el estrés será alto" nivel_luz == 3 & agua_estival == "lluvia" \~ "bajo", TRUE \~ "intermedio" ))

# Repetimos todo lo anterior concatenando todo el proceso:

taludes_analisis \<- taludes_bien \|\> rename(biomasa = Biomasa, nivel_luz = Luz, agua_estival = Agua) \|\> mutate(ID = 1:nrow(taludes_bien), supervivencia = as.factor(sample(c(0, 1), size = nrow(taludes_bien), prob = c(0.4, 0.6), replace = TRUE)), carbono = biomasa \* rnorm(n = nrow(taludes_bien), mean = 0.4, sd = 0.2)) \|\> select(ID, everything()) \|\> mutate( agua_estival = fct_recode( agua_estival, sequia = "Sequia estival", lluvia = "Lluvia estival"), nivel_luz = fct_recode( nivel_luz, `1` = "Nivel 1", `2` = "Nivel 2", `3` = "Nivel 3" )) \|\> mutate( estres = case_when( nivel_luz == 1 & agua_estival == "sequia" \~ "alto", nivel_luz == 3 & agua_estival == "lluvia" \~ "bajo", TRUE \~ "intermedio" ))

# Ejercicio 6

# Con el data.frame macrobenthos calcula en una nueva columna la relación entre

# la turbidez del agua y la materia orgánica

###### 6.2 Función summarize

taludes_analisis \|\> summarise( c_min = min(carbono), c_max = max(carbono) )

# Ver todas las funciones de agregación

?summarise

taludes_analisis \|\> group_by(estres) \|\> \# Este tipo de summary en R base se hace con aggregate() o tapply() summarise(biomasa_min = min(biomasa), biomasa_mean = mean(biomasa), biomasa_max = max(biomasa))

# Ejercicio 7

# Con el data.frame macrobenthos, cuenta el número de casos que hay en cada periodo de muestreo.

# Cuenta el número de casos distintos que hay de esfuerzo de muestreo

# Calcula la media de la turbidez para cada taxón

# ja

```{r primeros_tidypasos}
#| warning: false

# install.packages("tidyverse")
library(tidyverse)

penguins <- palmerpenguins::penguins
penguins

summary(penguins)
glimpse(penguins)
View(penguins)

# filter
penguins |> 
  filter(island == "Dream") 
penguins |> 
  filter(island == "Dream" & body_mass_g > 4500) # se pueden combinar criterios
penguins |> 
  filter(island == "Dream" | body_mass_g > 4500) 
penguins |> 
  filter(island %in% c("Dream", "Torgersen"))

# select
penguins |> 
  select(sex, body_mass_g)
penguins |> 
  select(ends_with("mm")) # seleccionar variables que tienen un patron
penguins |> 
  select(ends_with(c("mm", "g"))) 

# se pueden utilizar todo tipo de patrones de texto: https://rstudio.github.io/cheatsheets/strings.pdf

penguins |> 
  select(sex, body_mass_g, everything()) # se puede usar para reordenar variables

# arrange
penguins |> 
  select(sex, body_mass_g) |> 
  arrange(body_mass_g)
penguins |> 
  select(sex, body_mass_g) |> 
  arrange(desc(body_mass_g))
```

#### Ejercicio

1.  Crea un objeto con los pingüinos de la especie Adelie y ordena la tabla según la longitud del ala de los individuos.

2.  Crea un objeto a partir del anterior donde selecciones la isla y las variables relacionadas con el pico.

3.  Crea un objeto a partir del creado en el punto 1 donde selecciones todo menos la especie.

```{r segundos_tidypasos}

# mutate
penguins |> 
  mutate(bill_volume_mm2 = (bill_length_mm * bill_depth_mm) / 2) |> 
  select(bill_volume_mm2, everything())

penguins |>
  mutate(female_penguin = case_when(
    sex == "female" & body_mass_g < 3600 ~ "small female",
    sex == "female" & body_mass_g >= 3600 ~ "big female",
    TRUE ~ NA)) |>
  select(female_penguin, sex, body_mass_g)

# summarise
# se utiliza con funciones que resumen: n, n_distinct, mean, etc.
# ver ?summarise

penguins |> 
  summarise(
    body_min = min(body_mass_g, na.rm = TRUE),
    body_max = max(body_mass_g, na.rm = TRUE)
  )

penguins |> 
  group_by(sex) |> 
  summarise(body_min = min(body_mass_g, na.rm = TRUE),
  body_max = max(body_mass_g, na.rm = TRUE))
```

#### Ejercicio

1.  Con el `data.frame` penguins, cuenta el número de casos que hay en cada isla y calcula la media de la longitud del ala en cada isla.

2.  Con el mismo `data.frame` calcula la relación entre el peso en kg y la longitud del ala para cada individuo.

```{r save_read_tidyverse}
#| eval: false
mypenguins <- penguins |> 
  mutate(bill_volume_mm2 = (bill_length_mm * bill_depth_mm) / 2,
    female_penguin = case_when(
      sex == "female" & body_mass_g < 3600 ~ "small female",
      sex == "female" & body_mass_g >= 3600 ~ "big female",
      TRUE ~ NA)) 

write_delim(mypenguins, file = "mypenguins.csv", delim = ";")
# en file hay que especificar el directorio donde queremos que se guarde. Si no, se guardará en el directorio de trabajo (getwd())

misdatos <- read_delim(file = "mypenguins.csv")
View(misdatos)
```

<!--# Vero: introducir también join -->

------------------------------------------------------------------------

<details>

<summary>Session Info</summary>

```{r session_info}
Sys.time()
sessionInfo()
```

</details>
